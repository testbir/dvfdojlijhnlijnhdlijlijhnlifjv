# catalog_service/api/learning/course_learning.py

from fastapi import APIRouter, Depends, HTTPException, Request
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from typing import List, Optional
from db.dependencies import get_db_session
from models.course import Course
from models.module import Module
from models.content import ContentBlock
from models.access import CourseAccess
from models.progress import UserModuleProgress
from utils.auth import get_current_user_id

router = APIRouter()

@router.get("/{course_id}/welcome/", summary="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏")
async def course_welcome(course_id: int, request: Request, db: AsyncSession = Depends(get_db_session)):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –∫—É—Ä—Å–∞
    """
    user_id = get_current_user_id(request)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å
    result = await db.execute(select(Course).where(Course.id == course_id))
    course = result.scalar_one_or_none()
    if not course:
        raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not course.is_free:
        result = await db.execute(
            select(CourseAccess).where(
                CourseAccess.user_id == user_id,
                CourseAccess.course_id == course_id
            )
        )
        access = result.scalar_one_or_none()
        if not access:
            raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É")
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π
    total_modules_result = await db.execute(
        select(func.count(Module.id)).where(Module.course_id == course_id)
    )
    total_modules = total_modules_result.scalar() or 0
    
    return {
        "course_id": course.id,
        "course_title": course.title,
        "course_description": course.short_description,
        "total_modules": total_modules,
        "learning_url": f"/learning/courses/{course_id}/",
        "message": "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö—É—Ä—Å —Ç–µ–ø–µ—Ä—å –≤–∞—à. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
    }

@router.get("/{course_id}/", summary="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è")
async def course_learning_interface(course_id: int, request: Request, db: AsyncSession = Depends(get_db_session)):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à—Ç–æ—Ä–∫–∏, —Å–∞–π–¥–±–∞—Ä–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    user_id = get_current_user_id(request)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å –∏ –¥–æ—Å—Ç—É–ø
    result = await db.execute(select(Course).where(Course.id == course_id))
    course = result.scalar_one_or_none()
    if not course:
        raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not course.is_free:
        result = await db.execute(
            select(CourseAccess).where(
                CourseAccess.user_id == user_id,
                CourseAccess.course_id == course_id
            )
        )
        access = result.scalar_one_or_none()
        if not access:
            raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞
    modules_result = await db.execute(
        select(Module)
        .where(Module.course_id == course_id)
        .order_by(Module.order)
    )
    modules = modules_result.scalars().all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞
    sidebar_modules = []
    completed_modules_count = 0
    current_module = None
    
    for module in modules:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è
        progress_result = await db.execute(
            select(UserModuleProgress).where(
                UserModuleProgress.user_id == user_id,
                UserModuleProgress.module_id == module.id
            )
        )
        is_completed = progress_result.scalar_one_or_none() is not None
        
        if is_completed:
            completed_modules_count += 1
            status = "completed"
        else:
            status = "current" if current_module is None else "locked"
            if current_module is None:
                current_module = module
        
        sidebar_modules.append({
            "id": module.id,
            "title": module.title,
            "group_title": module.group_title,
            "order": module.order,
            "status": status
        })
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è (–≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã), –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
    if current_module is None and modules:
        current_module = modules[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
    current_module_blocks = []
    if current_module:
        blocks_result = await db.execute(
            select(ContentBlock)
            .where(ContentBlock.module_id == current_module.id)
            .order_by(ContentBlock.order)
        )
        blocks = blocks_result.scalars().all()
        
        for block in blocks:
            current_module_blocks.append({
                "id": block.id,
                "type": block.type,
                "title": block.title,
                "content": block.content,
                "order": block.order,
                "video_preview": block.video_preview
            })
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    total_modules = len(modules)
    progress_percent = round((completed_modules_count / total_modules * 100) if total_modules > 0 else 0, 1)
    
    return {
        "header": {
            "course_title": course.title,
            "progress_percent": progress_percent
        },
        "sidebar": {
            "modules": sidebar_modules
        },
        "content": {
            "current_module": {
                "id": current_module.id if current_module else None,
                "title": current_module.title if current_module else None,
                "group_title": current_module.group_title if current_module else None
            },
            "blocks": current_module_blocks,
            "can_complete_module": len(current_module_blocks) > 0
        }
    }

@router.get("/{course_id}/modules/{module_id}/", summary="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–¥—É–ª—å")
async def load_module_content(course_id: int, module_id: int, request: Request, db: AsyncSession = Depends(get_db_session)):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    user_id = get_current_user_id(request)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É
    result = await db.execute(select(Course).where(Course.id == course_id))
    course = result.scalar_one_or_none()
    if not course:
        raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not course.is_free:
        result = await db.execute(
            select(CourseAccess).where(
                CourseAccess.user_id == user_id,
                CourseAccess.course_id == course_id
            )
        )
        access = result.scalar_one_or_none()
        if not access:
            raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª—å
    result = await db.execute(
        select(Module).where(
            Module.id == module_id,
            Module.course_id == course_id
        )
    )
    module = result.scalar_one_or_none()
    if not module:
        raise HTTPException(status_code=404, detail="–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ –º–æ–¥—É–ª—è
    blocks_result = await db.execute(
        select(ContentBlock)
        .where(ContentBlock.module_id == module_id)
        .order_by(ContentBlock.order)
    )
    blocks = blocks_result.scalars().all()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è
    progress_result = await db.execute(
        select(UserModuleProgress).where(
            UserModuleProgress.user_id == user_id,
            UserModuleProgress.module_id == module_id
        )
    )
    is_completed = progress_result.scalar_one_or_none() is not None
    
    return {
        "module": {
            "id": module.id,
            "title": module.title,
            "group_title": module.group_title,
            "is_completed": is_completed
        },
        "blocks": [
            {
                "id": block.id,
                "type": block.type,
                "title": block.title,
                "content": block.content,
                "order": block.order,
                "video_preview": block.video_preview
            }
            for block in blocks
        ]
    }