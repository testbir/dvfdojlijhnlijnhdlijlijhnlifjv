
# catalog_service/scripts/init_db_async.py



import asyncio
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text

from catalog_service.core.base import Base
from catalog_service.core.config import settings

from urllib.parse import urlparse, urlunparse

def get_async_pg_url(url: str) -> str:
    parsed = urlparse(url)
    if '+asyncpg' in parsed.scheme:
        return url
    async_scheme = parsed.scheme + '+asyncpg'
    return urlunparse(parsed._replace(scheme=async_scheme))

DATABASE_URL = get_async_pg_url(settings.DATABASE_URL)
engine = create_async_engine(DATABASE_URL, echo=True)

async def sync_table_schema():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    async with engine.begin() as conn:
        print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –∏ –∫–æ–ª–æ–Ω–∫–∞—Ö
        result = await conn.execute(text("""
            SELECT table_name, column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_schema = 'public'
            ORDER BY table_name, ordinal_position
        """))
        
        existing_schema = {}
        for row in result:
            table_name = row.table_name
            if table_name not in existing_schema:
                existing_schema[table_name] = {}
            existing_schema[table_name][row.column_name] = {
                'data_type': row.data_type,
                'is_nullable': row.is_nullable,
                'column_default': row.column_default
            }
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º SQLAlchemy
        for table_name, table in Base.metadata.tables.items():
            print(f"üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É: {table_name}")
            
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º –µ—ë —Ü–µ–ª–∏–∫–æ–º
            if table_name not in existing_schema:
                print(f"‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É: {table_name}")
                await conn.run_sync(lambda sync_conn: table.create(sync_conn, checkfirst=True))
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É –≤ –º–æ–¥–µ–ª–∏
            for column in table.columns:
                column_name = column.name
                
                if column_name not in existing_schema[table_name]:
                    print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É {table_name}.{column_name}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏
                    column_type = column.type.compile(dialect=conn.dialect)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º nullable
                    nullable = "NULL" if column.nullable else "NOT NULL"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º default –∑–Ω–∞—á–µ–Ω–∏–µ
                    default_clause = ""
                    if column.default is not None:
                        if column.default.is_scalar:
                            default_value = column.default.arg
                            if isinstance(default_value, str):
                                default_clause = f"DEFAULT '{default_value}'"
                            else:
                                default_clause = f"DEFAULT {default_value}"
                        elif hasattr(column.default, 'arg'):
                            default_clause = f"DEFAULT '{column.default.arg}'"
                    
                    # –°–æ–∑–¥–∞–µ–º SQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
                    add_column_sql = f"""
                        ALTER TABLE {table_name} 
                        ADD COLUMN {column_name} {column_type} {default_clause} {nullable}
                    """
                    
                    try:
                        await conn.execute(text(add_column_sql))
                        print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {table_name}.{column_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ {table_name}.{column_name}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
                        continue
                else:
                    print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ {table_name}.{column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        print("üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def create_missing_tables():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
    async with engine.begin() as conn:
        print("üìã –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...")
        await conn.run_sync(Base.metadata.create_all)

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å—Ö–µ–º—ã"""
    try:
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        await create_missing_tables()
        
        # –ó–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É (–¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏)
        await sync_table_schema()
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(init_db())