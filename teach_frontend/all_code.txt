

/* ===== C:\Users\icipa\team-platform-public\teach_frontend\Dockerfile ===== */

# teach_frontend/Dockerfile
FROM node:20-alpine

WORKDIR /app

# Копируем package files
COPY package*.json ./

# Устанавливаем зависимости
RUN npm install

# Копируем исходный код
COPY . .

# Открываем порт
EXPOSE 5173

# Запускаем dev сервер с настройками для Docker
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "5173"]


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\eslint.config.js ===== */

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\index.html ===== */

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="/src/assets/icon.png" />
    
    <!-- Preconnect для оптимизации загрузки шрифтов -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Основные шрифты -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500,600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Sora:wght@100..800&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300..700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500&display=swap" rel="stylesheet">
    
    <!-- Material Icons -->
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" rel="stylesheet">
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AsynqTeach</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\package.json ===== */

{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tabler/icons-react": "^3.34.0",
    "axios": "^1.10.0",
    "crypto-js": "^4.2.0",
    "dompurify": "^3.2.6",
    "hls.js": "^1.6.7",
    "lucide-react": "^0.525.0",
    "prism-themes": "^1.9.0",
    "prismjs": "^1.30.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-icons": "^5.5.0",
    "react-player": "^3.1.0",
    "react-router-dom": "^7.6.2",
    "sass": "^1.89.2",
    "video.js": "^8.23.3",
    "videojs-contrib-quality-levels": "^4.1.0",
    "videojs-http-source-selector": "^1.1.6",
    "videojs-overlay": "^4.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.29.0",
    "@types/crypto-js": "^4.2.2",
    "@types/dompurify": "^3.0.5",
    "@types/hls.js": "^0.13.3",
    "@types/node": "^24.0.14",
    "@types/prismjs": "^1.26.5",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "@vitejs/plugin-react": "^4.5.2",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.29.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.2.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.0.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.34.1",
    "vite": "^7.0.0"
  }
}



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\README.md ===== */

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\api\authApi.ts ===== */

// teach_frontend/src/api/authApi.ts


// API-клиент для auth_service (порт 8000)
import { createApi } from "./axiosInstance";
export const authApi = createApi("/auth-api");



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\api\axiosInstance.ts ===== */

// teach_frontend/src/api/axiosInstance.ts
import axios from "axios";
import type { AxiosInstance } from "axios";

// Создаем типизированную функцию для создания API клиентов
export const createApi = (baseURL: string): AxiosInstance => {
  const instance = axios.create({
    baseURL,
    timeout: 30000,
    headers: {
      "Content-Type": "application/json",
    },
  });

  // Request interceptor для добавления токена
  instance.interceptors.request.use(
    (config) => {
      const authData = localStorage.getItem("auth_tokens");
      if (authData) {
        try {
          const tokens = JSON.parse(authData);
          if (tokens.access) {
            config.headers.Authorization = `Bearer ${tokens.access}`;
          }
        } catch (error) {
          console.error("Error parsing auth tokens:", error);
        }
      }
      return config;
    },
    (error) => {
      return Promise.reject(error);
    }
  );

  // Response interceptor для обработки ошибок
  instance.interceptors.response.use(
    (response) => response,
    async (error) => {
      const originalRequest = error.config;

      // Обработка 401 ошибки (токен истек)
      if (error.response?.status === 401 && !originalRequest._retry) {
        originalRequest._retry = true;

        try {
          const authData = localStorage.getItem("auth_tokens");
          if (authData) {
            const tokens = JSON.parse(authData);
            if (tokens.refresh) {
              // Пытаемся обновить токен
              const refreshResponse = await axios.post("/auth-api/api/token/refresh/", {
                refresh: tokens.refresh,
              });

              const newTokens = {
                access: refreshResponse.data.access,
                refresh: tokens.refresh, // Сохраняем старый refresh токен
              };

              localStorage.setItem("auth_tokens", JSON.stringify(newTokens));
              
              // Повторяем оригинальный запрос с новым токеном
              originalRequest.headers.Authorization = `Bearer ${newTokens.access}`;
              return instance(originalRequest);
            }
          }
        } catch (refreshError) {
          // Если обновление токена не удалось, перенаправляем на логин
          localStorage.removeItem("auth_tokens");
          window.location.href = "/login";
          return Promise.reject(refreshError);
        }
      }

      // Обработка других ошибок
      if (error.response?.status === 403) {
        console.error("Доступ запрещен:", error.response.data);
      }

      return Promise.reject(error);
    }
  );

  return instance;
};

// Экспорт конкретных API клиентов с новыми версионированными путями
export const authApi = createApi("/auth-api");
export const catalogApi = createApi("/catalog-api");
export const learningApi = createApi("/learning-api");
export const pointsApi = createApi("/points-api");


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\api\catalogApi.ts ===== */

// teach_frontend/src/api/catalogApi.ts

// API-клиент для catalog_service (порт 8001)
import { createApi } from "./axiosInstance";
export const catalogApi = createApi("/catalog-api");



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\api\learningApi.ts ===== */

// src/api/learningApi.ts
import { createApi } from "./axiosInstance";

export const learningApi = createApi("/learning-api");


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\api\pointsApi.ts ===== */

// teach_frontend/src/api/pointsApi.ts
import { createApi } from "./axiosInstance";
export const pointsApi = createApi("/points-api");


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\components\AuthModal.tsx ===== */

// teach_frontend/src/components/AuthModal.tsx

import React from 'react';
import '../styles/AuthModal.scss';

interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  onRegister: () => void;
  onLogin: () => void;
  courseTitle?: string;
  coursePrice?: number;
}

export default function AuthModal({ 
  isOpen, 
  onClose, 
  onRegister, 
  onLogin, 
  courseTitle, 
  coursePrice 
}: AuthModalProps) {
  
  if (!isOpen) return null;

  const handleBackdropClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  return (
    <div className="auth-modal-overlay" onClick={handleBackdropClick}>
      <div className="auth-modal">
        <div className="auth-modal-header">
          <button className="auth-modal-close" onClick={onClose}>
            <span className="material-symbols-rounded">close</span>
          </button>
        </div>

        <div className="auth-modal-content">
          <div className="auth-modal-icon">
            <span className="material-symbols-rounded">school</span>
          </div>
          
          <h2 className="auth-modal-title">Получите доступ к курсу</h2>
          
          {courseTitle && (
            <div className="auth-modal-course-info">
              <div className="course-highlight">
                <span className="course-name">{courseTitle}</span>
                {coursePrice && (
                  <span className="course-price">{coursePrice} ₽</span>
                )}
              </div>
            </div>
          )}

          <p className="auth-modal-description">
            Войдите в аккаунт или создайте новый, чтобы приобрести курс
          </p>

          <div className="auth-modal-actions">
            <button 
              className="auth-modal-btn auth-modal-btn--primary"
              onClick={onRegister}
            >
              <span className="material-symbols-rounded">person_add</span>
              Создать аккаунт
            </button>
            
            <button 
              className="auth-modal-btn auth-modal-btn--secondary"
              onClick={onLogin}
            >
              <span className="material-symbols-rounded">login</span>
              Войти в аккаунт
            </button>
          </div>

          <div className="auth-modal-benefits">
            <div className="benefit-item">
              <span className="material-symbols-rounded">check_circle</span>
              <span>Пожизненный доступ</span>
            </div>
            <div className="benefit-item">
              <span className="material-symbols-rounded">check_circle</span>
              <span>Отслеживание прогресса</span>
            </div>
            <div className="benefit-item">
              <span className="material-symbols-rounded">check_circle</span>
              <span>Практические задания</span>
            </div>
          </div>

          <div className="auth-modal-footer">
            <span className="footer-text">
              Регистрация займет меньше минуты
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\components\CodeInput.tsx ===== */

// teach_frontend/src/components/CodeInput.tsx

import React, { useRef, useState, useEffect } from "react";
import "../styles/EmailVerificationPage.scss"

interface CodeInputProps {
  length?: number;
  onComplete: (code: string) => void;
  disabled?: boolean;
}

export default function CodeInput({ length = 4, onComplete, disabled = false }: CodeInputProps) {
  const [values, setValues] = useState<string[]>(Array(length).fill(""));
  const inputsRef = useRef<(HTMLInputElement | null)[]>([]);

  useEffect(() => {
    const code = values.join("");
    if (code.length === length && code.match(/^\d+$/)) {
      onComplete(code);
    }
  }, [values, length, onComplete]);

  const handleChange = (index: number, value: string) => {
    if (value.match(/[^0-9]/)) return;

    const newValues = [...values];
    newValues[index] = value.slice(-1);
    setValues(newValues);

    if (value && index < length - 1) {
      inputsRef.current[index + 1]?.focus();
    }
  };

  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Backspace" && !values[index] && index > 0) {
      inputsRef.current[index - 1]?.focus();
    }
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData("text").slice(0, length);
    
    if (pastedData.match(/^\d+$/)) {
      const newValues = pastedData.split("").concat(Array(length).fill("")).slice(0, length);
      setValues(newValues);
      inputsRef.current[Math.min(pastedData.length, length - 1)]?.focus();
    }
  };

  return (
    <div className="code-input-container">
      {values.map((value, index) => (
        <input
          key={index}
          ref={(el) => {
            inputsRef.current[index] = el;
          }}
          type="text"
          inputMode="numeric"
          maxLength={1}
          value={value}
          onChange={(e) => handleChange(index, e.target.value)}
          onKeyDown={(e) => handleKeyDown(index, e)}
          onPaste={handlePaste}
          disabled={disabled}
          className={`code-input-field ${value ? 'filled' : ''}`}
        />
      ))}
    </div>
  );
}


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\components\CourseModal.tsx ===== */

// teach_frontend/src/components/CourseModal.tsx

import React, { useEffect, useCallback, useRef } from 'react';
import { createPortal } from 'react-dom';
import '../styles/CourseModal.scss';

interface ModalBlock {
  type: 'text' | 'image';
  content: string;
  order: number;
}

interface CourseModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  blocks: ModalBlock[];
  imageFormatter?: (url: string) => string;
}

const CourseModal: React.FC<CourseModalProps> = ({
  isOpen,
  onClose,
  title,
  blocks,
  imageFormatter = (url) => url
}) => {
  const modalRef = useRef<HTMLDivElement>(null);
  const previousActiveElement = useRef<HTMLElement | null>(null);

  // Сортируем блоки по порядку
  const sortedBlocks = [...blocks].sort((a, b) => a.order - b.order);

  // Управление фокусом для accessibility
  useEffect(() => {
    if (isOpen) {
      previousActiveElement.current = document.activeElement as HTMLElement;
      modalRef.current?.focus();
      document.body.style.overflow = 'hidden';
      document.body.classList.add('modal-open');
    }

    return () => {
      if (isOpen) {
        document.body.style.overflow = '';
        document.body.classList.remove('modal-open');
        previousActiveElement.current?.focus();
      }
    };
  }, [isOpen]);

  // Навигация с клавиатуры (только Escape для закрытия)
  const handleKeyDown = useCallback((e: KeyboardEvent) => {
    if (e.key === 'Escape') {
      onClose();
    }
  }, [onClose]);

  useEffect(() => {
    if (isOpen) {
      document.addEventListener('keydown', handleKeyDown);
      return () => document.removeEventListener('keydown', handleKeyDown);
    }
  }, [isOpen, handleKeyDown]);

  // Закрытие по клику на backdrop
  const handleBackdropClick = useCallback((e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  }, [onClose]);

  if (!isOpen) return null;

  const modalContent = (
    <div 
      className="course-modal-backdrop" 
      onClick={handleBackdropClick}
      role="dialog"
      aria-modal="true"
      aria-labelledby="modal-title"
    >
      <div className="course-modal-container">
        <div 
          className="course-modal"
          ref={modalRef}
          tabIndex={-1}
          role="document"
        >
          {/* Header с заголовком и кнопкой закрытия */}
          <div className="modal-header">
            <div className="modal-title-wrapper">
              <h2 id="modal-title" className="modal-title">{title}</h2>
            </div>
            <button 
              className="modal-close"
              onClick={onClose}
              aria-label="Закрыть модальное окно"
              type="button"
            >
              <span className="material-symbols-rounded">close</span>
            </button>
          </div>

          {/* Разделитель */}
          <div className="modal-divider" />

          {/* Контент - простая прокручиваемая лента */}
          <div className="modal-content">
            {sortedBlocks.length === 0 ? (
              <div className="modal-empty">
                <span className="material-symbols-rounded">description</span>
                <p>Информация о программе курса будет доступна позже</p>
              </div>
            ) : (
              // Рендерим все блоки подряд
              sortedBlocks.map((block, index) => (
                <div key={index} className="modal-block">
                  {block.type === 'text' ? (
                    <div 
                      className="text-block"
                      dangerouslySetInnerHTML={{ 
                        __html: block.content 
                      }}
                    />
                  ) : (
                    <div className="image-block">
                      <img
                        src={imageFormatter(block.content)}
                        alt=""
                        loading="lazy"
                        onError={(e) => {
                          const target = e.target as HTMLImageElement;
                          target.style.display = 'none';
                        }}
                      />
                    </div>
                  )}
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );

  return createPortal(modalContent, document.body);
};

export default CourseModal;


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\components\Header.tsx ===== */

// teach_frontend/src/components/Header.tsx

import { Link, useLocation } from "react-router-dom";
import { useAuth } from "../hooks/useAuth";
import logo from "../assets/logo.png";
import "../styles/Header.scss";
import UserDashboard from "./UserDashboard";

export default function Header({
  searchQuery,
  setSearchQuery,
}: {
  searchQuery?: string;
  setSearchQuery?: (value: string) => void;
}) {
  const location = useLocation();
  const currentPath = location.pathname;
  const { isAuthenticated } = useAuth();

  return (
    <header className="header">
      <div className="header-inner">
        <Link to="/" className="header-logo-link">
          <img src={logo} alt="Логотип" className="logo" />
        </Link>

        <div className="header-right">
          <div className="search-block">
            <input
              type="text"
              placeholder="Поиск курсов..."
              className="search-input"
              value={searchQuery || ""}
              onChange={(e) => setSearchQuery?.(e.target.value)}
            />
          </div>

            {isAuthenticated ? (
            <UserDashboard />
            ) : (
            <div className="auth-buttons">
              <Link to={`/login?redirect=${currentPath}`} className="header-auth-button">
                Вход
              </Link>
              <Link to={`/register?redirect=${currentPath}`} className="header-auth-button">
                Регистрация
              </Link>
            </div>
          )}


        </div>
      </div>
    </header>
  );
}


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\components\Layout.tsx ===== */

// teach_frontend/src/components/Layout.tsx

import type { ReactNode } from "react";
import { useLocation, matchPath } from "react-router-dom";
import Header from "./Header";
import "../styles/Layout.scss";

type LayoutProps = {
  children: ReactNode;
  searchQuery?: string;
  setSearchQuery?: (value: string) => void;
};

export default function Layout({
  children,
  searchQuery,
  setSearchQuery,
}: LayoutProps) {
  const location = useLocation();

  const showHeader =
    location.pathname === "/" ||
    matchPath("/course/:id", location.pathname) !== null;

  return (
    <div className="layout">
      <div style={{ height: "1px" }} />
      {showHeader && (
        <Header searchQuery={searchQuery} setSearchQuery={setSearchQuery} />
      )}
      <main>{children}</main>
    </div>
  );
}


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\components\loading\AuthLoading.tsx ===== */

// src/components/loading/AuthLoading.tsx

import React from "react";
import "./AuthLoading.scss";

// Спиннер для кнопок
export const ButtonSpinner: React.FC<{ size?: "small" | "medium" }> = ({ 
  size = "medium" 
}) => (
  <div className={`button-spinner ${size}`}>
    <div className="spinner"></div>
  </div>
);

// Overlay спиннер для критических операций
export const AuthOverlay: React.FC<{ 
  message?: string;
  children?: React.ReactNode;
}> = ({ 
  message = "Загрузка...", 
  children 
}) => (
  <div className="auth-overlay">
    <div className="auth-overlay-content">
      <div className="auth-overlay-spinner">
        <div className="spinner"></div>
      </div>
      {children || <p className="auth-overlay-message">{message}</p>}
    </div>
  </div>
);

// Inline спиннер для текста
export const InlineSpinner: React.FC<{ 
  message?: string;
  size?: "small" | "medium";
}> = ({ 
  message = "Отправка...", 
  size = "small" 
}) => (
  <div className="inline-spinner">
    <div className={`spinner ${size}`}></div>
    <span className="inline-spinner-text">{message}</span>
  </div>
);

// Спиннер для таймера (например, для повторной отправки кода)
export const TimerSpinner: React.FC<{ 
  seconds: number;
  message?: string;
}> = ({ 
  seconds, 
  message = "Можно запросить повторно через" 
}) => (
  <div className="timer-spinner">
    <div className="timer-icon">
      <div className="spinner small"></div>
    </div>
    <span className="timer-text">
      {message} {seconds} сек.
    </span>
  </div>
);

export default {
  ButtonSpinner,
  AuthOverlay,
  InlineSpinner,
  TimerSpinner,
};



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\components\skeletons\HomePageSkeleton.tsx ===== */

// src/components/skeletons/HomePageSkeleton.tsx

import React from "react";
import "./HomePageSkeleton.scss";

// Отдельный компонент для skeleton баннера
export const BannerSkeleton: React.FC<{ type: "left" | "right" }> = ({ type }) => (
  <div className={`skeleton-banner ${type}`}>
    <div className="skeleton-shimmer"></div>
  </div>
);

// Отдельный компонент для skeleton карточки курса
export const CourseSkeleton: React.FC = () => (
  <div className="skeleton-course-card">
    <div className="skeleton-course-content">
      <div className="skeleton-course-text">
        <div className="skeleton-course-title">
          <div className="skeleton-shimmer"></div>
        </div>
        <div className="skeleton-course-description">
          <div className="skeleton-shimmer"></div>
        </div>
        <div className="skeleton-course-description-line2">
          <div className="skeleton-shimmer"></div>
        </div>
      </div>
      <div className="skeleton-course-avatar">
        <div className="skeleton-shimmer"></div>
      </div>
    </div>
    
    <div className="skeleton-course-footer">
      <div className="skeleton-course-price">
        <div className="skeleton-shimmer"></div>
      </div>
      <div className="skeleton-course-button">
        <div className="skeleton-shimmer"></div>
      </div>
    </div>
  </div>
);

// Основной компонент skeleton для всей HomePage
export const HomePageSkeleton: React.FC = () => {
  return (
    <div className="skeleton-home-homepage">
      {/* Skeleton баннеры */}
      <div className="skeleton-banner-row">
        <BannerSkeleton type="left" />
        <BannerSkeleton type="right" />
      </div>

      {/* Skeleton сетка курсов */}
      <div className="skeleton-course-grid">
        {Array.from({ length: 6 }).map((_, index) => (
          <CourseSkeleton key={index} />
        ))}
      </div>
    </div>
  );
};

export default HomePageSkeleton;


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\components\TimerComponent.tsx ===== */

// teach_frontend/src/components/TimerComponent.tsx


import { useState, useEffect } from "react";

interface TimerComponentProps {
  initialSeconds: number;
  onExpire: () => void;
  onResend: () => void;
  canResend: boolean;
}

export default function TimerComponent({
  initialSeconds,
  onExpire,
  onResend,
  canResend,
}: TimerComponentProps) {
  const [seconds, setSeconds] = useState(initialSeconds);

  useEffect(() => {
    setSeconds(initialSeconds);
  }, [initialSeconds]);

  useEffect(() => {
    if (seconds <= 0) {
      onExpire();
      return;
    }

    const interval = setInterval(() => {
      setSeconds((prev) => prev - 1);
    }, 1000);

    return () => clearInterval(interval);
  }, [seconds, onExpire]);

  const formatTime = (sec: number) => {
    const mins = Math.floor(sec / 60);
    const secs = sec % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  return (
    <div style={{ textAlign: "center", marginTop: "20px" }}>
      {seconds > 0 ? (
        <p>Можно запросить повторно через {formatTime(seconds)}</p>
      ) : (
        <>
          <p>Код можно отправить повторно</p>
          <button
            onClick={onResend}
            disabled={!canResend}
            style={{
              marginTop: "10px",
              padding: "10px 20px",
              backgroundColor: canResend ? "#4CAF50" : "#ccc",
              color: "white",
              border: "none",
              borderRadius: "4px",
              cursor: canResend ? "pointer" : "not-allowed",
            }}
          >
            Повторно отправить код
          </button>
        </>
      )}
    </div>
  );
}


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\components\UserDashboard.tsx ===== */

// teach_frontend/src/components/UserDashboard.tsx

import { useState, useEffect, useRef } from 'react';
import { useAuth } from '../hooks/useAuth';
import dashboardService, { type DashboardData, type UserData } from '../services/dashboardService';
import "../styles/UserDashboard.scss";

export default function UserDashboard() {
  const [isOpen, setIsOpen] = useState(false);
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const dropdownRef = useRef<HTMLDivElement>(null);
  
  const { logout } = useAuth();

  // Загрузка базовых данных пользователя при монтировании
  useEffect(() => {
    let mounted = true; // Флаг для предотвращения race conditions
    
    const loadUserData = async () => {
      if (userData) return; // Если уже загружены, не загружаем повторно
      
      try {
        console.log('🔍 Загружаем данные пользователя...');
        const user = await dashboardService.getUserData();
        console.log('✅ Данные пользователя получены:', user);
        
        if (mounted) {
          setUserData(user);
        }
      } catch (err: any) {
        console.error('❌ Ошибка загрузки данных пользователя:', err);
        if (mounted) {
          setError('Ошибка загрузки профиля');
        }
      }
    };

    loadUserData();

    return () => {
      mounted = false; // Cleanup
    };
  }, []); // Пустой массив зависимостей - выполняется только при монтировании

  // Загрузка полных данных dashboard при открытии dropdown
  useEffect(() => {
    if (isOpen && !dashboardData) {
      loadDashboardData();
    }
  }, [isOpen, dashboardData]);

  // Закрытие dropdown при клике вне его
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    }

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const loadDashboardData = async () => {
    setLoading(true);
    setError('');
    
    try {
      console.log('🔍 Загружаем полные данные dashboard...');
      const data = await dashboardService.getFullDashboard();
      console.log('✅ Данные dashboard получены:', data);
      
      setUserData(data.userData);
      setDashboardData(data.dashboardData);
    } catch (err: any) {
      console.error('❌ Ошибка загрузки dashboard:', err);
      setError('Ошибка загрузки данных');
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
      setIsOpen(false);
    } catch (err) {
      console.error('Logout error:', err);
    }
  };

  // Функция для закрытия дропдауна
  const handleClose = () => {
    setIsOpen(false);
  };

  // Дебаг информация
  console.log('🔄 UserDashboard render:', { 
    userData, 
    userDataExists: !!userData,
    username: userData?.username 
  });

  return (
    <div className="user-dashboard" ref={dropdownRef}>
      <button 
        className="dashboard-toggle"
        onClick={() => setIsOpen(!isOpen)}
        aria-expanded={isOpen}
      >
        <span className="material-symbols-rounded profile-icon">person</span>
        {/* Показываем реальный username или загрузку */}
        Мой Профиль
        <span className={`dropdown-arrow ${isOpen ? 'open' : ''}`}>▼</span>
      </button>

      {isOpen && (
        <div className="dashboard-dropdown">
          {loading ? (
            <div className="dashboard-loading">
              <div className="loading-spinner"></div>
              Загрузка...
            </div>
          ) : error ? (
            <div className="dashboard-error">
              <span className="error-icon">⚠️</span>
              {error}
              <button onClick={loadDashboardData} className="retry-btn">
                Повторить
              </button>
            </div>
          ) : (
            <>
              {/* Информация о пользователе */}
              <div className="dashboard-header">
                <div className="user-avatar">
                  <span className="material-symbols-rounded">person</span>
                </div>
                <div className="user-info">
                  {/* Показываем реальный username */}
                  <div className="username">{userData?.username || 'Загрузка...'}</div>
                  <div className="user-email">{userData?.email || 'Загрузка...'}</div>
                </div>
                {/* Кнопка закрытия для мобильной версии */}
                <button className="mobile-close-btn" onClick={handleClose}>
                  <span className="material-symbols-rounded">close</span>
                </button>
              </div>

              {/* Статистика */}
              {dashboardData && (
                <div className="dashboard-stats">
                  <div className="stat-item">
                    <span className="material-symbols-rounded">school</span>
                    <span>Курсов: {dashboardData.stats.total_courses}</span>
                  </div>
                  <div className="stat-item">
                    <span className="material-symbols-rounded">trending_up</span>
                    <span>Прогресс: {dashboardData.stats.total_progress_percent}%</span>
                  </div>
                </div>
              )}

              {/* Курсы */}
              {dashboardData && dashboardData.courses.length > 0 && (
                <div className="dashboard-courses">
                  <div className="courses-header">
                    <span className="material-symbols-rounded">book</span>
                    Мои курсы ({dashboardData.courses.length})
                  </div>
                  <div className="courses-list">
                    {dashboardData.courses.slice(0, 3).map((course) => (
                      <div key={course.course_id} className="course-item">
                        <div className="course-info">
                          <div className="course-title">{course.course_title}</div>
                          <div className="course-progress">
                            <div className="progress-bar">
                              <div 
                                className="progress-fill"
                                style={{ width: `${course.progress_percent}%` }}
                              ></div>
                            </div>
                            <span className="progress-text">{course.progress_percent}%</span>
                          </div>
                        </div>
                        {course.is_completed && (
                          <span className="completion-badge material-symbols-rounded">
                            check_circle
                          </span>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Кнопка "Мои Курсы" - неактивная для новичков */}
              {(!dashboardData || dashboardData.courses.length === 0) && (
                <div className="dashboard-my-courses-section">
                  <button className="my-courses-btn-inactive" disabled>
                    <span className="material-symbols-outlined">stacks</span>
                    Мои Курсы
                  </button>
                  <div className="inactive-button-hint">
                    У вас пока нет приобретённых курсов
                  </div>
                </div>
              )}
              

              {/* Меню действий */}
              <div className="dashboard-actions">
                <button className="action-item">
                  <span className="material-symbols-rounded">settings</span>
                  Настройки
                </button>
                <button className="action-item logout-btn" onClick={handleLogout}>
                  <span className="material-symbols-rounded">logout</span>
                  Выйти
                </button>
              </div>
            </>
          )}
        </div>
      )}
    </div>
  );
}


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\components\VideoPlayer.tsx ===== */



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\contexts\AuthContext.tsx ===== */

// src/contexts/AuthContext.tsx

import React, { createContext, useState, useContext, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import authService from "../services/authService";
import type{ User } from "../types/auth.types";

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  checkAuth: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const navigate = useNavigate();

  const checkAuth = async () => {
    const tokens = authService.getTokens();
    if (!tokens) {
      setIsLoading(false);
      return;
    }

    try {
      // Здесь можно добавить запрос на получение данных пользователя
      // const response = await authApi.get("/api/user/me/");
      // setUser(response.data);
      setUser({ id: 1, email: "user@example.com", username: "user", is_email_confirmed: true });
    } catch (error) {
      authService.removeTokens();
      setUser(null);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    checkAuth();
  }, []);

  const login = async (email: string, password: string) => {
    try {
      await authService.login({ email, password });
      await checkAuth();
      navigate("/");
    } catch (error) {
      throw error;
    }
  };

  const logout = async () => {
    await authService.logout();
    setUser(null);
    navigate("/");
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated: !!user,
        isLoading,
        login,
        logout,
        checkAuth,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within AuthProvider");
  }
  return context;
};


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\hooks\useAuth.tsx ===== */

// teach_frontend/src/hooks/useAuth.tsx
import { createContext, useContext, useState, useEffect } from "react";
import type { ReactNode } from "react";
import authService, { type User } from "../services/authService";

interface AuthContextType {
  isAuthenticated: boolean;
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  checkAuth: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    const tokens = authService.getTokens();
    if (tokens?.access) {
      try {
        const userData = await authService.getCurrentUser();
        setUser(userData);
        setIsAuthenticated(true);
      } catch {
        localStorage.removeItem("auth_tokens");
        setIsAuthenticated(false);
        setUser(null);
      }
    } else {
      setIsAuthenticated(false);
      setUser(null);
    }
  };

  const login = async (email: string, password: string) => {
    await authService.login({ email, password });
    await checkAuth();
  };

  const logout = async () => {
    await authService.logout();
    setIsAuthenticated(false);
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, user, login, logout, checkAuth }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) throw new Error("useAuth must be used within an AuthProvider");
  return context;
};



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\main.tsx ===== */

// src/main.tsx

import ReactDOM from "react-dom/client";
import React from "react";
import { BrowserRouter } from "react-router-dom";
import AppRouter from "./router/AppRouter";
import { AuthProvider } from "./hooks/useAuth";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <AppRouter />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\pages\CoursePage.tsx ===== */

// teach_frontend/src/pages/CoursePage.tsx

import { useEffect, useState, useMemo } from "react";
import { useParams, useNavigate } from "react-router-dom";
import catalogService, { type Course as CatalogCourse } from "../services/catalogService";
import { catalogApi } from "../api/axiosInstance";
import { useAuth } from "../hooks/useAuth";
import Layout from "../components/Layout";
import VideoPlayer from "../components/VideoPlayer";
import AuthModal from "../components/AuthModal";
import CourseModal from "../components/CourseModal";
import "../styles/CoursePage.scss";

interface CourseModalData {
  title: string;
  blocks: Array<{
    type: "text" | "image";
    content: string;
    order: number;
  }>;
}

interface StudentWorksData {
  title: string;
  description: string;
  works: Array<{
    image: string;
    description: string;
    bot_tag: string;
    order: number;
  }>;
}

function formatCountdown(seconds: number): string {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);

  const parts: string[] = [];
  if (hours) parts.push(`${hours}ч`);
  if (minutes || hours) parts.push(`${minutes}м`);
  parts.push(`${secs}с`);
  return parts.join(" ");
}

export default function CoursePage() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();
  const [course, setCourse] = useState<CatalogCourse | null>(null);
  const [courseModal, setCourseModal] = useState<CourseModalData | null>(null);
  const [studentWorks, setStudentWorks] = useState<StudentWorksData | null>(null);
  const [videoError, setVideoError] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [showVideo, setShowVideo] = useState(false);
  const [showCourseModal, setShowCourseModal] = useState(false);
  const [discountSecondsLeft, setDiscountSecondsLeft] = useState<number | null>(null);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [isMobile, setIsMobile] = useState(false);

  // мобильность
  useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth <= 950);
    checkMobile();
    window.addEventListener("resize", checkMobile);
    return () => window.removeEventListener("resize", checkMobile);
  }, []);

  // загрузка данных
  useEffect(() => {
    if (!id) return;

    const fetchData = async () => {
      try {
        setLoading(true);

        // основной курс
        const data = await catalogService.getCourseDetail(Number(id));
        setCourse(data);

        // модалка с программой
        try {
          const modalResp = await catalogApi.get(`/v1/public/courses/${id}/modal/`);
          if (modalResp?.data) setCourseModal(modalResp.data);
        } catch {
          // нет модалки
        }

        // работы учеников
        try {
          const worksResp = await catalogApi.get(`/v1/public/courses/${id}/student-works/`);
          if (worksResp?.data) setStudentWorks(worksResp.data);
        } catch {
          // нет работ
        }
      } catch (error) {
        console.error("Ошибка загрузки данных курса:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  // таймер скидки
  useEffect(() => {
    if (!course?.is_discount_active || !course.discount_until) {
      setDiscountSecondsLeft(null);
      return;
    }
    const end = new Date(course.discount_until).getTime();
    const now = Date.now();
    const left = Math.max(0, Math.floor((end - now) / 1000));
    setDiscountSecondsLeft(left);
  }, [course?.is_discount_active, course?.discount_until]);

  useEffect(() => {
    if (!discountSecondsLeft || discountSecondsLeft <= 0) return;
    const interval = setInterval(() => {
      setDiscountSecondsLeft((prev) => (prev !== null && prev > 0 ? prev - 1 : 0));
    }, 1000);
    return () => clearInterval(interval);
  }, [discountSecondsLeft]);

  const handleVideoError = (error: string) => {
    setVideoError(error);
    console.error("Ошибка видеоплеера:", error);
  };

  // производные
  const hasAccess = useMemo(() => {
    if (!course) return false;
    return course.is_free || !!course.is_purchased;
  }, [course]);

  const finalPrice = useMemo(() => {
    if (!course) return 0;
    if (course.is_free) return 0;
    const percent = course.is_discount_active && course.discount ? course.discount : 0;
    const raw = Math.round(course.price * (1 - (percent || 0) / 100));
    return Math.max(0, raw);
  }, [course]);

  const buttonText = useMemo(() => {
    if (!course) return "ЗАГРУЗКА";
    if (hasAccess) return "ОТКРЫТЬ";
    return course.is_free ? "ПОЛУЧИТЬ" : "КУПИТЬ";
  }, [course, hasAccess]);

  const videoUrl = useMemo(() => {
    if (!course?.video) return "";
    const base = catalogService.formatVideoUrl(course.video);
    if (base.includes(".m3u8")) {
      const sep = base.includes("?") ? "&" : "?";
      const version = course.is_discount_active ? `${course.id}_discount` : `${course.id}_regular`;
      return `${base}${sep}v=${version}`;
    }
    return base;
  }, [course?.video, course?.is_discount_active, course?.id]);

  const handleOpenCourse = () => {
    if (!course) return;
    navigate(`/course/${course.id}/learn`);
  };

  const handlePurchase = async () => {
    if (!course || course.is_free) return;

    if (!isAuthenticated) {
      setShowAuthModal(true);
      return;
    }

    try {
      const response = await catalogService.buyCourse(course.id);
      if (response.success) {
        setCourse({ ...course, is_purchased: true });
        alert("Курс успешно приобретен");
      } else {
        alert(response.message || "Не удалось купить курс");
      }
    } catch (error) {
      console.error("Ошибка при покупке курса:", error);
      alert("Ошибка при покупке курса. Попробуйте снова.");
    }
  };

  const handleRegister = () => {
    setShowAuthModal(false);
    navigate("/register");
  };

  const handleLogin = () => {
    setShowAuthModal(false);
    navigate("/login");
  };

  if (loading) {
    return (
      <Layout>
        <div className="course-page">
          <div className="loading-spinner">
            <div className="spinner"></div>
            <p>Загрузка курса...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (!course) {
    return (
      <Layout>
        <div className="course-page">
          <div className="error-message">
            <h2>Курс не найден</h2>
            <p>Запрашиваемый курс не существует или был удален.</p>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <>
      <Layout>
        <div className="course-page">
          <div className="course-main">
            <h1>{course.title}</h1>

            {course.banner_text && (
              <div
                className="course-banner"
                style={{
                  background: `linear-gradient(35deg, ${course.banner_color_left} 30%, ${course.banner_color_right} 60%)`,
                }}
              >
                <div className="banner-content">
                  <img
                    src={catalogService.formatImageUrl(course.image)}
                    alt={course.title}
                    className="banner-image"
                  />
                  <p className="banner-text">{course.banner_text}</p>
                </div>
              </div>
            )}

            <div className="course-content-layout">
              {/* Левая колонка */}
              <div className="course-content">
                <div className="course-buttons-group">
                  <button className="video-toggle-button" onClick={() => setShowVideo((p) => !p)}>
                    {showVideo ? "Скрыть видео" : "Смотреть о курсе"}
                    <span
                      className="material-symbols-outlined"
                      style={{ transform: `rotate(${showVideo ? 90 : 0}deg)` }}
                    >
                      arrow_forward_ios
                    </span>
                  </button>

                  {courseModal && (
                    <button className="program-button" onClick={() => setShowCourseModal(true)}>
                      💡 Программа курса
                    </button>
                  )}
                </div>

                <div className={`video-section-wrapper ${showVideo ? "open" : ""}`}>
                  {course.video && showVideo && (
                    <div className="video-container">
                      <VideoPlayer
                        key={`video-${course.id}-${course.is_discount_active ? "dis" : "reg"}`}
                        videoUrl={videoUrl}
                        onError={handleVideoError}
                        className="course-video-player"
                      />
                      {videoError && (
                        <div className="video-error">
                          <p>⚠️ {videoError}</p>
                          <button onClick={() => window.location.reload()}>Перезагрузить страницу</button>
                        </div>
                      )}
                    </div>
                  )}
                </div>

                <div
                  className="course-description"
                  dangerouslySetInnerHTML={{ __html: course.full_description || "" }}
                />
              </div>

              {/* Правая колонка: цена и кнопка (десктоп) */}
              {!isMobile && (
                <div className="course-purchase-sidebar">
                  <div className="price-section">
                    {discountSecondsLeft !== null && discountSecondsLeft > 0 && (
                      <p className="discount-timer">Осталось {formatCountdown(discountSecondsLeft)}</p>
                    )}

                    {course.is_free ? (
                      <span className="course-free">Бесплатно</span>
                    ) : course.price > finalPrice ? (
                      <div className="course-paid">
                        <div className="course-final-price-wrapper">
                          <span className="course-original-price">{course.price} ₽</span>
                          <span className="course-final-price">{finalPrice} ₽</span>
                          <span className="discount-percent">
                            &minus;{Math.round(((course.price - finalPrice) / course.price) * 100)}%
                          </span>
                        </div>
                      </div>
                    ) : (
                      <span className="course-final-price">{finalPrice} ₽</span>
                    )}
                  </div>

                  <button
                    className={`course-button ${hasAccess ? "accessed" : ""}`}
                    onClick={hasAccess ? handleOpenCourse : handlePurchase}
                  >
                    {buttonText}
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Работы учеников */}
          {studentWorks && (
            <div className="student-works-section">
              <h2 className="section-title">{studentWorks.title}</h2>
              <p className="section-description">{studentWorks.description}</p>

              <div className="works-grid">
                {studentWorks.works
                  .sort((a, b) => a.order - b.order)
                  .map((work, index) => (
                    <div key={index} className="work-item">
                      <div className="work-image">
                        <img src={catalogService.formatImageUrl(work.image)} alt={work.description} />
                      </div>
                      <div className="work-info">
                        {work.description && <p className="work-description">{work.description}</p>}
                        {work.bot_tag && (
                          <a
                            href={`https://t.me/${work.bot_tag.replace("@", "")}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="work-link"
                          >
                            {work.bot_tag}
                          </a>
                        )}
                      </div>
                    </div>
                  ))}
              </div>
            </div>
          )}

          {/* Модалка программы */}
          {courseModal && (
            <CourseModal
              isOpen={showCourseModal}
              onClose={() => setShowCourseModal(false)}
              title={courseModal.title}
              blocks={courseModal.blocks}
              imageFormatter={(url) => catalogService.formatImageUrl(url)}
            />
          )}

          {/* Модалка авторизации */}
          <AuthModal
            isOpen={showAuthModal}
            onClose={() => setShowAuthModal(false)}
            onRegister={handleRegister}
            onLogin={handleLogin}
            courseTitle={course?.title}
            coursePrice={finalPrice}
          />
        </div>
      </Layout>

      {/* Фиксированный блок оплаты для мобильных устройств */}
      {isMobile && (
        <div className="course-purchase-sidebar mobile-fixed">
          <div className="price-section">
            {discountSecondsLeft !== null && discountSecondsLeft > 0 && (
              <p className="discount-timer">Осталось {formatCountdown(discountSecondsLeft)}</p>
            )}

            {course.is_free ? (
              <span className="course-free">Бесплатно</span>
            ) : course.price > finalPrice ? (
              <div className="course-paid">
                <div className="course-final-price-wrapper">
                  <span className="course-original-price">{course.price} ₽</span>
                  <span className="course-final-price">{finalPrice} ₽</span>
                  <span className="discount-percent">
                    &minus;{Math.round(((course.price - finalPrice) / course.price) * 100)}%
                  </span>
                </div>
              </div>
            ) : (
              <span className="course-final-price">{finalPrice} ₽</span>
            )}
          </div>
          <button
            className={`course-button ${hasAccess ? "accessed" : ""}`}
            onClick={hasAccess ? handleOpenCourse : handlePurchase}
          >
            {buttonText}
          </button>
        </div>
      )}
    </>
  );
}



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\pages\EmailVerificationPage.tsx ===== */

// src/pages/EmailVerificationPage.tsx

import React, { useState, useEffect } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import Layout from "../components/Layout";
import CodeInput from '../components/CodeInput';
import authService from '../services/authService';

import "../styles/auth.scss";
import "../styles/EmailVerificationPage.scss";

const EmailVerificationPage: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();

  const purpose = searchParams.get('purpose'); // 'register' | 'reset_password'
  const userIdParam = searchParams.get('user_id');
  const emailParam = searchParams.get('email');

  const [code, setCode] = useState('');
  const [error, setError] = useState('');
  const [timer, setTimer] = useState(60);
  const [resending, setResending] = useState(false);

  useEffect(() => {
    const interval = setInterval(() => {
      setTimer(prev => (prev > 0 ? prev - 1 : 0));
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  // Валидация входных параметров
  useEffect(() => {
    if (purpose === 'reset_password' && !emailParam) {
      navigate('/forgot-password');
      return;
    }
    if (purpose === 'register' && !userIdParam) {
      navigate('/register');
      return;
    }
    if (purpose !== 'register' && purpose !== 'reset_password') {
      navigate('/login');
    }
  }, [purpose, userIdParam, emailParam, navigate]);

  const handleVerify = async () => {
    setError('');
    try {
      if (purpose === 'register') {
        // вернёт и сохранит токены
        await authService.verifyCode(Number(userIdParam), code);
        navigate('/?message=activated');
      } else if (purpose === 'reset_password') {
        const res = await authService.verifyResetCode(String(emailParam), code);
        navigate(`/set-new-password?user_id=${res.user_id}`);
      }
    } catch (err: any) {
      setError(err?.response?.data?.error || err?.message || 'Ошибка проверки кода');
    }
  };

  const handleResend = async () => {
    if (timer > 0 || resending) return;
    setResending(true);
    setError('');

    try {
      if (purpose === 'register') {
        if (!userIdParam) throw new Error('Отсутствует user_id');
        await authService.resendCode(Number(userIdParam), 'register');
      } else if (purpose === 'reset_password') {
        if (!emailParam) throw new Error('Отсутствует email');
        await authService.requestPasswordReset(String(emailParam));
      }
      setTimer(60);
    } catch (err: any) {
      setError(err?.response?.data?.error || err?.message || 'Не удалось отправить код повторно');
    } finally {
      setResending(false);
    }
  };

  return (
    <Layout>
      <div className="auth-wrapper email-verification-page">
        <div className="id-badge">
            <div className="id-icon">
              <svg width="23" height="22" viewBox="0 0 23 22" xmlns="http://www.w3.org/2000/svg">
                <path d="M16.4131 19.3398L12.4463 13.0098L12.082 12.4287L11.6406 12.9531L7.85742 17.4482L7.73926 17.5879V20.9697H3.66211L4.19629 16.7354L9.09277 11.2275L9.51465 10.7539L8.95605 10.4541L5.6875 8.70312L5.65234 8.68359L5.61523 8.6709L2.07422 7.44922L21.7803 1.28809L16.4131 19.3398Z" fill="#69A2FF" stroke="#69A2FF"/>
              </svg>
            </div>
            <span className="id-text">ID</span>
          </div>

          <div className="logout-btn">
            <span className="material-symbols-outlined">close</span>
          </div>
            <div className="auth-content">
              <h1 className="auth-title emailverification-title">Подтвердите почту</h1>

              <div className="verification-block">
                
                <p className="verification-text">
                    Код отправлен на {emailParam || '—'}
                  </p>

                <CodeInput length={4} onComplete={setCode} />

                <div className="resend-block">
                  {timer > 0 ? (
                    <p className="resend-timer">Можно запросить повторно через {timer} сек.</p>
                  ) : (
                    <button
                      onClick={handleResend}
                      disabled={resending}
                      className="resend-text"
                    >
                      {resending ? 'Отправляем...' : 'Повторно отправить код'}
                    </button>
                  )}
                </div>
              </div>

              <div className="auth-error-container"></div>
              {error && <div className="auth-error emailverification-error">{error}</div>}

              <button
                onClick={handleVerify}
                disabled={code.length !== 4}
                className="auth-button emailverification-button"
              >
                Подтвердить
              </button>
            </div>
      </div>
    </Layout>
  );
};

export default EmailVerificationPage;



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\pages\ForgotPasswordPage.tsx ===== */

// src/pages/ForgotPasswordPage.tsx

import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import authService from "../services/authService";
import Layout from "../components/Layout";

import "../styles/auth.scss";
import "../styles/ForgotPasswordPage.scss";

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const navigate = useNavigate();

  useEffect(() => {
    if (!error) return;
    const t = setTimeout(() => setError(""), 3000);
    return () => clearTimeout(t);
  }, [error]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);
    try {
      // новый сервис
      await authService.requestPasswordReset(email);
      navigate(
        `/email-verification?email=${encodeURIComponent(email)}&purpose=reset_password`
      );
    } catch (err: any) {
      setError(
        err?.response?.data?.error ||
          err?.response?.data?.message ||
          "Пользователь с таким email не найден"
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <Layout>
      <div className="auth-wrapper forgot-password-page">

        <div className="id-badge">
            <div className="id-icon">
              <svg width="23" height="22" viewBox="0 0 23 22" xmlns="http://www.w3.org/2000/svg">
                <path d="M16.4131 19.3398L12.4463 13.0098L12.082 12.4287L11.6406 12.9531L7.85742 17.4482L7.73926 17.5879V20.9697H3.66211L4.19629 16.7354L9.09277 11.2275L9.51465 10.7539L8.95605 10.4541L5.6875 8.70312L5.65234 8.68359L5.61523 8.6709L2.07422 7.44922L21.7803 1.28809L16.4131 19.3398Z" fill="#69A2FF" stroke="#69A2FF"/>
              </svg>
            </div>
            <span className="id-text">ID</span>
          </div>

          <div className="logout-btn">
            <span className="material-symbols-outlined">close</span>
          </div>

            <div className="auth-content">
              <h1 className="auth-title forgotpassword-title">Смена пароля</h1>

              <form onSubmit={handleSubmit} className="auth-form forgotpassword-form">
                <div className={`auth-input-wrapper ${email ? "filled" : ""}`}>
                  <input
                    className="auth-input"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    onFocus={(e) => e.target.parentElement?.classList.add("focused")}
                    onBlur={(e) => {
                      if (!e.target.value) e.target.parentElement?.classList.remove("focused");
                    }}
                    required
                  />
                  <span className="auth-placeholder">Введите почту</span>
                </div>

                <div className="auth-links forgotpassword-links">
                  <Link to="/login" className="forgotpassword-login-link">
                    Вернуться ко входу
                  </Link>
                </div>

                <div className="auth-error-container"></div>
                {error && <div className="auth-error forgotpassword-error">{error}</div>}

                <button type="submit" disabled={loading} className="auth-button forgotpassword-button">
                  {loading ? "Отправка..." : "Отправить код"}
                </button>
              </form>
            </div>
      </div>
    </Layout>
  );
}



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\pages\HomePage.tsx ===== */

// src/pages/HomePage.tsx

import { useEffect, useState, useMemo } from "react";
import { useSearchParams, Link } from "react-router-dom";
import catalogService, { type Course, type Banner } from "../services/catalogService";
import Layout from "../components/Layout";
import HomePageSkeleton from "../components/skeletons/HomePageSkeleton";
import "../styles/HomePage.scss";

export default function HomePage() {
  const [courses, setCourses] = useState<Course[]>([]);
  const [banners, setBanners] = useState<Banner[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchParams, setSearchParams] = useSearchParams();
  const [showActivationToast, setShowActivationToast] = useState(false);
  const [loading, setLoading] = useState(true);

  // локальный фильтр
  const filteredCourses = useMemo(() => {
    const q = searchQuery.trim().toLowerCase();
    if (!q) return courses;
    return courses.filter(
      c =>
        c.title.toLowerCase().includes(q) ||
        (c.short_description || "").toLowerCase().includes(q)
    );
  }, [courses, searchQuery]);

  // финальная цена
  const getFinalPrice = (c: Course) => {
    if (c.is_free) return 0;
    const percent = c.is_discount_active && c.discount ? c.discount : 0;
    const v = Math.round(c.price * (1 - (percent || 0) / 100));
    return Math.max(0, v);
  };

  const getButtonText = (c: Course) => {
    if (c.is_free) return "ОТКРЫТЬ";
    if (c.is_purchased) return "ОТКРЫТЬ";
    return "ОТКРЫТЬ";
  };

  useEffect(() => {
    setLoading(true);
    Promise.all([catalogService.getCourses(), catalogService.getBanners()])
      .then(([coursesResp, bannersResp]) => {
        setCourses((coursesResp.courses || []).sort((a, b) => (a.order ?? 0) - (b.order ?? 0)));
        setBanners(
          (bannersResp || [])
            .sort((a, b) => a.order - b.order)
        );
      })
      .catch(err => console.error("Ошибка загрузки данных:", err))
      .finally(() => {
        setTimeout(() => setLoading(false), 300);
      });
  }, []);

  useEffect(() => {
    if (searchParams.get("message") === "activated") {
      setShowActivationToast(true);
      searchParams.delete("message");
      setSearchParams(searchParams, { replace: true });
      setTimeout(() => setShowActivationToast(false), 8000);
    }
  }, [searchParams, setSearchParams]);

  return (
    <Layout searchQuery={searchQuery} setSearchQuery={setSearchQuery}>
      {showActivationToast && (
        <div className="activation-toast">
          <div className="toast-content">
            <span className="toast-icon">✅</span>
            <div className="toast-text">
              <div className="toast-title">Аккаунт активирован!</div>
              <div className="toast-subtitle">Войдите для продолжения</div>
            </div>
            <button className="toast-close" onClick={() => setShowActivationToast(false)}>×</button>
          </div>
        </div>
      )}

      {loading ? (
        <HomePageSkeleton />
      ) : (
        <div className="home-homepage" style={{ animation: "fadeInContent 0.5s ease-out", opacity: 1 }}>
          <div className="home-banner-row">
            {banners.map((banner, index) => {
              const image = (
                <img
                  key={`banner-${banner.id}`}
                  src={catalogService.formatImageUrl(banner.image)}
                  alt={`Баннер ${index + 1}`}
                  className={`home-homepage-banner ${index === 0 ? "left" : "right"}`}
                  onError={(e) => (e.currentTarget.src = "/fallback.png")}
                />
              );
              return banner.link ? (
                <a
                  key={banner.id}
                  href={banner.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  style={{ display: "block", position: "relative", zIndex: 2 }}
                >
                  {image}
                </a>
              ) : (
                image
              );
            })}
          </div>

          <div className="home-course-grid">
            {filteredCourses.map((course) => {
              const finalPrice = getFinalPrice(course);
              const hasDiscount = !course.is_free && course.price > finalPrice;
              return (
<Link key={course.id} to={`/course/${course.id}`} className="home-course-card-link">
  <div className="home-course-card">
    <div className="home-course-content">
      <div className="home-course-text">
        <h3 className="home-course-title">{course.title}</h3>
        <p className="home-course-description">{course.short_description}</p>
      </div>
      <img
        src={catalogService.formatImageUrl(course.image)}
        alt={course.title}
        onError={(e) => (e.currentTarget.src = "/fallback.png")}
        className="home-course-avatar"
      />
    </div>

    <div className="home-course-footer">
      <div className="home-course-price">
        {course.is_free ? (
          <span className="home-course-free">Бесплатно</span>
        ) : hasDiscount ? (
          <div className="home-course-paid">
            <div className="home-course-original-price">{course.price} ₽</div>
            <div className="home-course-final-price">{finalPrice} ₽</div>
          </div>
        ) : (
          <span className="home-course-final-price">{finalPrice} ₽</span>
        )}
      </div>

      <span className="home-course-button">{getButtonText(course)}</span>
    </div>
  </div>
</Link>

              );
            })}
          </div>
        </div>
      )}
    </Layout>
  );
}



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\pages\LearningPage.tsx ===== */



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\pages\LoginPage.tsx ===== */

// src/pages/LoginPage.tsx

import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "../hooks/useAuth";
import Layout from "../components/Layout";



import "../styles/auth.scss";
import "../styles/LoginPage.scss";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [activationData, setActivationData] = useState<{ user_id: number; email: string } | null>(null);

  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setActivationData(null);
    setLoading(true);

    try {
      await login(email.trim(), password);
      navigate("/");
    } catch (err: any) {
      // Новый формат специальной ошибки из authService.login
      if (err?.type === "NOT_ACTIVATED") {
        setError(err.message || "Аккаунт не активирован");
        setActivationData({ user_id: err.userId, email: err.email });
      } else {
        const data = err?.response?.data;
        setError(data?.detail || data?.message || err?.message || "Неверные учетные данные");
      }
    } finally {
      setLoading(false);
    }
  };

  const goToActivation = () => {
    if (!activationData) return;
    navigate(
      `/email-verification?user_id=${activationData.user_id}&email=${encodeURIComponent(
        activationData.email
      )}&purpose=register`
    );
  };

  return (
    <Layout>
      <div className="auth-wrapper login-page">

        <div className="id-badge">
            <div className="id-icon">
              <svg width="23" height="22" viewBox="0 0 23 22" xmlns="http://www.w3.org/2000/svg">
                <path d="M16.4131 19.3398L12.4463 13.0098L12.082 12.4287L11.6406 12.9531L7.85742 17.4482L7.73926 17.5879V20.9697H3.66211L4.19629 16.7354L9.09277 11.2275L9.51465 10.7539L8.95605 10.4541L5.6875 8.70312L5.65234 8.68359L5.61523 8.6709L2.07422 7.44922L21.7803 1.28809L16.4131 19.3398Z" fill="#69A2FF" stroke="#69A2FF"/>
              </svg>
            </div>
            <span className="id-text">ID</span>
          </div>

          <div className="logout-btn">
            <span className="material-symbols-outlined">close</span>
          </div>

            <div className="auth-content">
              <h1 className="auth-title login-title">Вход</h1>

              <form onSubmit={handleSubmit} className="auth-form login-form">
                <div className={`auth-input-wrapper ${email ? "filled" : ""}`}>
                  <input
                    className="auth-input"
                    type="email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    onFocus={(e) => e.target.parentElement?.classList.add("focused")}
                    onBlur={(e) => {
                      if (!e.target.value) e.target.parentElement?.classList.remove("focused");
                    }}
                    required
                  />
                  <span className="auth-placeholder">Введите почту</span>
                </div>

                <div className={`auth-input-wrapper ${password ? "filled" : ""}`}>
                  <input
                    className="auth-input password-input"
                    type="password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    onFocus={(e) => e.target.parentElement?.classList.add("focused")}
                    onBlur={(e) => {
                      if (!e.target.value) e.target.parentElement?.classList.remove("focused");
                    }}
                    required
                  />
                  <span className="auth-placeholder">Введите пароль</span>
                </div>

                <div className="auth-links login-links">
                  <Link to="/register" className="login-register-link">
                    Создать аккаунт
                  </Link>
                  <Link to="/forgot-password" className="login-forgot-link">
                    Забыли пароль?
                  </Link>
                </div>

                <div className="auth-error-container"></div>
                {error && (
                  <div className="auth-error login-error">
                    <span>{error}</span>
                    {activationData && (
                      <button type="button" onClick={goToActivation} className="activation-btn">
                        Активировать
                      </button>
                    )}
                  </div>
                )}

                <button type="submit" disabled={loading} className="auth-button login-button">
                  {loading ? "Вход..." : "Войти"}
                </button>
              </form>
            </div>
          </div>
    </Layout>
  );
}



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\pages\PasswordResetSuccessPage.tsx ===== */

// src/pages/ProfilePage.tsx

const ProfilePage = () => {
  return <div>👤 Это защищённая страница профиля</div>;
};

export default ProfilePage;



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\pages\RegisterPage.tsx ===== */

// src/pages/SetNewPasswordPage.tsx

import React, { useState } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import Layout from "../components/Layout";
import authService from "../services/authService";

import "../styles/auth.scss";
import "../styles/SetNewPasswordPage.scss";

const SetNewPasswordPage: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();

  const userId = searchParams.get("user_id");
  const [password1, setPassword1] = useState("");
  const [password2, setPassword2] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");

    if (!userId) {
      setError("Отсутствует user_id");
      return;
    }
    if (password1 !== password2) {
      setError("Пароли не совпадают");
      return;
    }

    setLoading(true);
    try {
      await authService.setNewPassword(Number(userId), password1);
      navigate("/login");
    } catch (err: any) {
      setError(err?.response?.data?.error || err?.message || "Ошибка при обновлении пароля");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Layout>
      <div className="auth-wrapper">

                <div className="id-badge">
            <div className="id-icon">
              <svg width="23" height="22" viewBox="0 0 23 22" xmlns="http://www.w3.org/2000/svg">
                <path d="M16.4131 19.3398L12.4463 13.0098L12.082 12.4287L11.6406 12.9531L7.85742 17.4482L7.73926 17.5879V20.9697H3.66211L4.19629 16.7354L9.09277 11.2275L9.51465 10.7539L8.95605 10.4541L5.6875 8.70312L5.65234 8.68359L5.61523 8.6709L2.07422 7.44922L21.7803 1.28809L16.4131 19.3398Z" fill="#69A2FF" stroke="#69A2FF"/>
              </svg>
            </div>
            <span className="id-text">ID</span>
          </div>

          <div className="logout-btn">
            <span className="material-symbols-outlined">close</span>
          </div>

            <div className="auth-content">
              <h1 className="auth-title newpassword-title">Новый пароль</h1>

              <form onSubmit={handleSubmit} className="auth-form newpassword-form">
                <div className={`auth-input-wrapper ${password1 ? "filled" : ""}`}>
                  <input
                    className="auth-input password-input"
                    type="password"
                    value={password1}
                    onChange={(e) => setPassword1(e.target.value)}
                    onFocus={(e) => e.target.parentElement?.classList.add("focused")}
                    onBlur={(e) => {
                      if (!e.target.value) e.target.parentElement?.classList.remove("focused");
                    }}
                    required
                  />
                  <span className="auth-placeholder">Новый пароль</span>
                </div>

                <div className={`auth-input-wrapper ${password2 ? "filled" : ""}`}>
                  <input
                    className="auth-input password-input"
                    type="password"
                    value={password2}
                    onChange={(e) => setPassword2(e.target.value)}
                    onFocus={(e) => e.target.parentElement?.classList.add("focused")}
                    onBlur={(e) => {
                      if (!e.target.value) e.target.parentElement?.classList.remove("focused");
                    }}
                    required
                  />
                  <span className="auth-placeholder">Повторите пароль</span>
                </div>

                {error && <div className="auth-error newpassword-error">{error}</div>}

                <button type="submit" disabled={loading} className="auth-button newpassword-button">
                  {loading ? "Сохранение..." : "Сменить пароль"}
                </button>
              </form>
            </div>
          </div>
    </Layout>
  );
};

export default SetNewPasswordPage;



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\router\AppRouter.tsx ===== */

// frontnd/src/router/AppRouter.tsx


import { Routes, Route, Navigate } from "react-router-dom";

import HomePage from "../pages/HomePage";
import LoginPage from "../pages/LoginPage";
import RegisterPage from "../pages/RegisterPage";
import ForgotPasswordPage from "../pages/ForgotPasswordPage";
import EmailVerificationPage from "../pages/EmailVerificationPage";
import SetNewPasswordPage from "../pages/SetNewPasswordPage";
import CoursePage from "../pages/CoursePage";
import LearningPage from "../pages/LearningPage";

const AppRouter = () => {
  return (
    <Routes>
      <Route path="/" element={<HomePage />} />
      <Route path="/course/:id" element={<CoursePage />} />
      <Route path="/course/:courseId/learn" element={<LearningPage />} />
      <Route path="/login" element={<LoginPage />} />
      <Route path="/register" element={<RegisterPage />} />
      <Route path="/forgot-password" element={<ForgotPasswordPage />} />
      <Route path="/email-verification" element={<EmailVerificationPage />} />
      <Route path="/set-new-password" element={<SetNewPasswordPage />} />
      <Route path="*" element={<Navigate to="/" />} />
    </Routes>
  );
};

export default AppRouter;


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\router\PrivateRoute.tsx ===== */

// teach_frontend/src/router/PrivateRoute.tsx

import React from "react";
import { Navigate } from "react-router-dom";

// Вариант без контекста — только по наличию access токена
const isAuthenticated = () => {
  return !!localStorage.getItem("access"); // или sessionStorage
};

interface Props {
  children: React.ReactNode;
}

const PrivateRoute: React.FC<Props> = ({ children }) => {
  if (!isAuthenticated()) {
    return <Navigate to="/login" replace />;
  }

  return <>{children}</>;
};

export default PrivateRoute;



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\services\authService.ts ===== */

// teach_frontend/src/services/authService.ts
import { authApi } from "../api/authApi";

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface AuthTokens {
  access: string;
  refresh: string;
}


export interface RegisterData {
  username: string;
  email: string;
  password1: string;
  password2: string;
}

export interface User {
  id: number;
  username: string;
  email: string;
}

class AuthService {
  // Логин
  async login(credentials: LoginCredentials): Promise<AuthTokens> {
    try {
      const response = await authApi.post("/api/token/", credentials);
      const tokens: AuthTokens = {
        access: response.data.access,
        refresh: response.data.refresh,
      };
      localStorage.setItem("auth_tokens", JSON.stringify(tokens));
      return tokens;
    } catch (error: any) {
      if (error.response?.data?.error === "account_not_activated") {
        throw {
          type: "NOT_ACTIVATED",
          message: error.response.data.message,
          userId: error.response.data.user_id,
          email: error.response.data.email,
        };
      }
      throw error;
    }
  }

  // Регистрация
  async register(data: RegisterData): Promise<{ user_id: number; message: string }> {
    const response = await authApi.post("/api/register/", {
      username: data.username,
      email: data.email,
      password1: data.password1,
      password2: data.password2,
    });
    return response.data;
  }

  // Подтверждение email
  async verifyCode(userId: number, code: string): Promise<AuthTokens> {
    const response = await authApi.post("/api/verify-code/", {
      user_id: userId,
      code: code,
    });
    const tokens: AuthTokens = {
      access: response.data.access,
      refresh: response.data.refresh,
    };
    localStorage.setItem("auth_tokens", JSON.stringify(tokens));
    return tokens;
  }

  // Повторная отправка кода
  async resendCode(userId: number, purpose: string = "register"): Promise<void> {
    await authApi.post("/api/resend-code/", { user_id: userId, purpose });
  }

  // Запрос сброса пароля
  async requestPasswordReset(emailOrObj: string | { email: string }): Promise<void> {
    const email = typeof emailOrObj === "string" ? emailOrObj : emailOrObj.email;
    await authApi.post("/api/request-reset/", { email });
  }

  // Подтверждение кода сброса
  async verifyResetCode(email: string, code: string): Promise<{ user_id: number }> {
    const response = await authApi.post("/api/verify-reset-code/", { email, code });
    return response.data;
  }

  // Установка нового пароля
  async setNewPassword(userId: number, password: string): Promise<void> {
    await authApi.post("/api/set-new-password/", { user_id: userId, password });
  }

  // Удаление токенов из хранилища
  removeTokens(): void {
    localStorage.removeItem("auth_tokens");
  }

  // Выход
  async logout(): Promise<void> {
    try {
      const raw = localStorage.getItem("auth_tokens");
      const tokens: AuthTokens | null = raw ? JSON.parse(raw) : null;
      if (tokens?.refresh) {
        await authApi.post("/api/logout/", { refresh: tokens.refresh });
      }
    } catch (error) {
      console.error("Logout error:", error);
    } finally {
      this.removeTokens();
    }
  }

  // Текущий пользователь
  async getCurrentUser(): Promise<User> {
    const response = await authApi.get("/api/user/");
    return response.data;
  }

  // Проверка авторизации
  isAuthenticated(): boolean {
    const raw = localStorage.getItem("auth_tokens");
    const tokens: AuthTokens | null = raw ? JSON.parse(raw) : null;
    return !!tokens?.access;
  }

  // Получение токенов
  getTokens(): AuthTokens | null {
    const raw = localStorage.getItem("auth_tokens");
    return raw ? JSON.parse(raw) : null;
  }
}

export default new AuthService();



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\services\catalogService.ts ===== */

// teach_frontend/src/services/catalogService.ts
import { catalogApi } from "../api/axiosInstance";

// === ТИПЫ ===
export interface Course {
  id: number;
  title: string;
  short_description: string;
  full_description?: string;
  image: string | null;
  price: number;
  discount?: number;
  is_free: boolean;
  is_purchased?: boolean;
  modules_count?: number;
  students_count?: number;
  order?: number;
  video?: string | null;
  video_preview?: string | null;
  banner_text?: string | null;
  banner_color_left?: string | null;
  banner_color_right?: string | null;
  group_title?: string | null;
  discount_start?: string | null;
  discount_until?: string | null;
  is_discount_active?: boolean;
}

export interface Module {
  id: number;
  title: string;
  group_title?: string | null;
  order: number;
  sp_award: number;
  blocks_count: number;
  is_completed?: boolean;
}

export interface Banner {
  id: number;
  image: string;
  order: number;
  link?: string | null;
}

export interface PromoCode {
  id: number;
  code: string;
  discount_percent: number;
  valid_until?: string | null;
  max_uses?: number | null;
  uses_left?: number | null;
  is_active: boolean;
}

class CatalogService {
  // CDN URLs
  private readonly PUBLIC_CDN = "https://79340a29-0019-4283-b338-388e7f5c1822.selstorage.ru";
  private readonly PRIVATE_CDN = "https://3e95e171-5a4f-482f-828a-d9394d4fb18e.selcdn.net";

  // Утилиты для форматирования URL
  formatImageUrl(url: string | null): string {
    if (!url) return "";
    if (url.startsWith("http")) return url;
    return `${this.PUBLIC_CDN}/${url}`;
  }

  formatVideoUrl(url: string | null, isPrivate = false): string {
    if (!url) return "";
    if (url.startsWith("http")) return url;
    return isPrivate ? `${this.PRIVATE_CDN}/${url}` : `${this.PUBLIC_CDN}/${url}`;
  }

// === КУРСЫ ===
async getCourses(params?: {
  page?: number;
  limit?: number;
  search?: string;
  is_free?: boolean;
}): Promise<{ courses: Course[]; total: number }> {
  const { data } = await catalogApi.get("/v1/public/courses/", { params });
  const courses = Array.isArray(data) ? data : (data.courses ?? []);
  const total = Array.isArray(data) ? data.length : (data.total ?? courses.length);
  return { courses, total };
}


  async getCourseDetail(courseId: number): Promise<Course> {
    const response = await catalogApi.get(`/v1/public/courses/${courseId}`);
    return response.data;
  }

  async buyCourse(courseId: number, promoCode?: string): Promise<{
    success: boolean;
    message: string;
    purchase_id?: number;
  }> {
      const response = await catalogApi.post(
        `/v1/public/courses/${courseId}/buy/`,
        { course_id: courseId, promo_code: promoCode }
      );
    return response.data;
  }

  async getMyCourses(): Promise<Course[]> {
    const response = await catalogApi.get("/v1/public/my-courses/");
    return response.data.courses || response.data;
  }

  // === БАННЕРЫ ===
  async getBanners(): Promise<Banner[]> {
    const response = await catalogApi.get("/v1/public/banners/");
    return response.data;
  }

  // === ПРОМОКОДЫ ===
  async checkPromoCode(courseId: number, code: string): Promise<{
    valid: boolean;
    discount_percent?: number;
    final_price?: number;
    message?: string;
  }> {
    const response = await catalogApi.post("/v1/public/promocodes/check/", {
      course_id: courseId,
      code: code
    });
    return response.data;
  }

  // === ДАШБОРД ===
  async getDashboardData(): Promise<{
    user_id: number;
    stats: {
      total_courses: number;
      completed_courses: number;
      total_progress_percent: number;
    };
    courses: Array<{
      course_id: number;
      course_title: string;
      image: string | null;
      progress_percent: number;
      is_completed: boolean;
      purchased_at: string;
    }>;
  }> {
    const response = await catalogApi.get("/v1/public/dashboard/");
    return response.data;
  }

  // === ПРОФИЛЬ ===
  async getUserProfile(): Promise<{
    id: number;
    username: string;
    email: string;
  }> {
    const response = await catalogApi.get("/v1/public/profile/");
    return response.data;
  }
}

export default new CatalogService();



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\services\courseService.ts ===== */

// teach_frontend/src/services/courseService.ts
import { catalogApi } from "../api/catalogApi";

export interface Course {
  id: number;
  title: string;
  short_description: string;
  full_description: string;
  image: string | null;
  is_free: boolean;
  price: number;
  discount: number | null;
  is_purchased?: boolean;
  modules_count?: number;
  students_count?: number;
}

export interface CourseDetail extends Course {
  video: string | null;
  video_preview: string | null;
  modules: Module[];
  is_purchased: boolean;
  purchase_date?: string;
}

export interface Module {
  id: number;
  title: string;
  group_title?: string;
  order: number;
  sp_award: number;
  blocks_count: number;
}

class CourseService {
async getCourses(params?: {
  page?: number;
  limit?: number;
  search?: string;
  is_free?: boolean;
}): Promise<{ courses: Course[]; total: number }> {
  const { data } = await catalogApi.get("/v1/public/courses/", { params });
  const courses = Array.isArray(data) ? data : (data.courses ?? []);
  const total = Array.isArray(data) ? data.length : (data.total ?? courses.length);
  return { courses, total };
}

  async getCourse(courseId: number): Promise< CourseDetail > {
    const response = await catalogApi.get(`/v1/public/courses/${courseId}`);
    return response.data;
  }

  async buyCourse(courseId: number, promoCode?: string): Promise<{
    success: boolean;
    message: string;
    purchase_id?: number;
  }> {
    const response = await catalogApi.post("/v1/public/buy-course/", {
      course_id: courseId,
      promo_code: promoCode
    });
    return response.data;
  }

  async checkPromoCode(courseId: number, code: string): Promise<{
    valid: boolean;
    discount_percent?: number;
    final_price?: number;
    message?: string;
  }> {
    const response = await catalogApi.post("/v1/public/promocodes/check/", {
      course_id: courseId,
      code: code
    });
    return response.data;
  }

  async getMyCourses(): Promise<Course[]> {
    const response = await catalogApi.get("/v1/public/my-courses/");
    return response.data;
  }
}

export default new CourseService();



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\services\dashboardService.ts ===== */

// teach_frontend/src/services/dashboardService.ts
import { catalogApi } from "../api/catalogApi";

export interface UserStats {
  total_courses: number;
  completed_courses: number;
  total_progress_percent: number;
}

export interface UserCourse {
  course_id: number;
  course_title: string;
  image: string | null;
  progress_percent: number;
  is_completed: boolean;
  purchased_at: string;
}

export interface DashboardData {
  user_id: number;
  stats: UserStats;
  courses: UserCourse[];
  recent_progress: Array<{
    course_id: number;
    course_title: string;
    total_modules: number;
    completed_modules: number;
    progress_percent: number;
  }>;
}

export interface UserProfile {
  id: number;
  username: string;
  email: string;
}

class DashboardService {
  async getUserProfile(): Promise<UserProfile> {
    const response = await catalogApi.get("/v1/public/profile/");
    return response.data;
  }

  async getDashboardData(): Promise<DashboardData> {
    const response = await catalogApi.get("/v1/public/dashboard/");
    return response.data;
  }

  async getUserStats(): Promise<UserStats> {
    const response = await catalogApi.get("/v1/public/stats/");
    return response.data;
  }

  async getFullDashboard(): Promise<{
    profile: UserProfile;
    dashboard: DashboardData;
  }> {
    const [profile, dashboard] = await Promise.all([
      this.getUserProfile(),
      this.getDashboardData()
    ]);
    return { profile, dashboard };
  }
}

export default new DashboardService();



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\services\learningService.ts ===== */



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\services\pointsService.ts ===== */

// teach_frontend/src/services/pointsService.ts
import { pointsApi } from "../api/axiosInstance";

export interface PointsBalance {
  balance: number;
  user_id: number;
}

export interface PointsTransaction {
  id: number;
  user_id: number;
  amount: number;
  operation_type: 'award' | 'spend' | 'refund';
  description: string;
  reference_type?: string;
  reference_id?: number;
  created_at: string;
}

class PointsService {
  async getBalance(): Promise<PointsBalance> {
    const response = await pointsApi.get("/v1/public/balance/");
    return response.data;
  }

  async getTransactions(params?: {
    limit?: number;
    offset?: number;
  }): Promise<{
    items: PointsTransaction[];
    total: number;
    limit: number;
    offset: number;
  }> {
    const response = await pointsApi.get("/v1/public/transactions/", { params });
    return response.data;
  }

  async getPointsStats(): Promise<{
    total_earned: number;
    total_spent: number;
    current_balance: number;
  }> {
    const response = await pointsApi.get("/v1/public/stats/");
    return response.data;
  }
}

export default new PointsService();






/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\types\auth.types.ts ===== */

// src/types/auth.types.ts

export interface User {
  id: number;
  email: string;
  username: string;
  is_email_confirmed: boolean;
}

export interface AuthTokens {
  access: string;
  refresh: string;
}

export interface LoginData {
  email: string;
  password: string;
}

export interface RegisterData {
  username: string;
  email: string;
  password1: string;
  password2: string;
}

export interface VerifyCodeData {
  user_id: number;
  code: string;
}

export interface RequestResetData {
  email: string;
}

export interface VerifyResetCodeData {
  email: string;
  code: string;
}

export interface SetNewPasswordData {
  user_id: number;
  password1: string;
  password2: string;
}


/* ===== C:\Users\icipa\team-platform-public\teach_frontend\src\vite-env.d.ts ===== */

/// <reference types="vite/client" />



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\tsconfig.app.json ===== */

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\tsconfig.json ===== */

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\tsconfig.node.json ===== */

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}



/* ===== C:\Users\icipa\team-platform-public\teach_frontend\vite.config.ts ===== */

// teach_frontend/vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

const inDocker = process.env.DOCKER_ENV === 'true'
const tgt = (name: string, port: number) =>
  inDocker ? `http://${name}:${port}` : `http://localhost:${port}`

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: {
      '/auth-api': {
        target: tgt('authservice', 8000),
        changeOrigin: true,
        rewrite: p => p.replace(/^\/auth-api/, ''),
      },
      '/catalog-api': {
        target: tgt('catalogservice', 8001),
        changeOrigin: true,
        rewrite: p => p.replace(/^\/catalog-api/, ''),
      },
      '/learning-api': {
        target: tgt('learningservice', 8002), // внутренний порт, снаружи проброшен как 8004
        changeOrigin: true,
        rewrite: p => p.replace(/^\/learning-api/, ''),
      },
      '/points-api': {
        target: tgt('pointsservice', 8003),
        changeOrigin: true,
        rewrite: p => p.replace(/^\/points-api/, ''),
      },
    },
  },
})

