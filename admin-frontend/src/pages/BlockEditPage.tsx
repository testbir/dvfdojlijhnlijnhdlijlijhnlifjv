// admin-frontend/src/pages/BlockEditPage.tsx (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤)

import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { blocksApi, uploadApi } from '../services/adminApi';
import Layout from '../components/Layout';
import {
  Container,
  Title,
  TextInput,
  Textarea,
  Select,
  NumberInput,
  Button,
  Loader,
  Center,
  Notification,
  FileInput,
  Image,
  Alert,
  Progress,
  Code,
  Paper,
  Text,
} from '@mantine/core';

const blockTypes = [
  { value: 'text', label: '–¢–µ–∫—Å—Ç' },
  { value: 'video', label: '–í–∏–¥–µ–æ' },
  { value: 'code', label: '–ö–æ–¥' },
  { value: 'image', label: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' },
];

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
const SUPPORTED_LANGUAGES = [
  { value: 'python', label: 'Python' },
  { value: 'javascript', label: 'JavaScript' },
  { value: 'typescript', label: 'TypeScript' },
  { value: 'tsx', label: 'TypeScript React (TSX)' },
  { value: 'jsx', label: 'JavaScript React (JSX)' },
  { value: 'html', label: 'HTML' },
  { value: 'css', label: 'CSS' },
  { value: 'scss', label: 'SCSS' },
  { value: 'sql', label: 'SQL' },
  { value: 'json', label: 'JSON' },
  { value: 'yaml', label: 'YAML' },
  { value: 'bash', label: 'Bash/Shell' },
  { value: 'java', label: 'Java' },
  { value: 'csharp', label: 'C#' },
  { value: 'cpp', label: 'C++' },
  { value: 'go', label: 'Go' },
  { value: 'rust', label: 'Rust' },
  { value: 'php', label: 'PHP' },
  { value: 'ruby', label: 'Ruby' },
  { value: 'markdown', label: 'Markdown' },
  { value: 'dockerfile', label: 'Dockerfile' },
  { value: 'plaintext', label: 'Plain Text' },
];


type BlockType = 'text' | 'video' | 'code' | 'image';
type Lang = typeof SUPPORTED_LANGUAGES[number]['value'];


export default function BlockEditPage() {
  const { blockId } = useParams<{ blockId: string }>();
  const navigate = useNavigate();

  const [block, setBlock] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [videoProcessing, setVideoProcessing] = useState(false);
  const [videoProcessingProgress, setVideoProcessingProgress] = useState(0);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchBlock = async () => {
      try {
        const res = await blocksApi.getBlock(Number(blockId));
          if (res.type === 'code' && !res.language) res.language = 'plaintext';
          setBlock(res);
      } catch {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–ª–æ–∫–∞');
      } finally {
        setLoading(false);
      }
    };
    fetchBlock();
  }, [blockId]);

  const handleFileUpload = async (file: File) => {
    try {
      setUploading(true);
    const res = await uploadApi.uploadImage(file);

    setBlock((prev: any) => (
      { ...prev, content: res?.url || res?.image }
    ));

    } catch {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
    } finally {
      setUploading(false);
    }
  };

  const handleVideoUpload = async (file: File) => {
    try {
      setVideoProcessing(true);
      setVideoProcessingProgress(0);
      setError(null);

      const res = await uploadApi.uploadVideo(file);

      // –∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      for (let i = 50; i <= 100; i += 10) {
        await new Promise(r => setTimeout(r, 500));
        setVideoProcessingProgress(i);
      }

      const url = res?.master_playlist_url || res?.url;
      if (!url) throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª URL –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç–∞');

      setBlock((prev: any) => ({ ...prev, content: url }));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ');
    } finally {
      setVideoProcessing(false);
      setVideoProcessingProgress(0);
    }
  };


  const handleVideoPreviewUpload = async (file: File) => {
    try {
      setUploading(true);        
      const res = await uploadApi.uploadImage(file, 'video-previews');
        
      setBlock((prev: any) => (
        { ...prev, video_preview: res?.url || res?.image }
      ));
    
    } catch {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é');
    } finally {
      setUploading(false);
    }
  };

  const handleSave = async () => {
    const id = Number(blockId);
    if (!id) {
      setError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –±–ª–æ–∫–∞');
      return;
    }
    setSaving(true);
    try {
      await blocksApi.updateBlock(id, {
        type: block.type as BlockType,
        title: String(block.title || ''),
        content: String(block.content || '').trim(),
        order: Number(block.order || 1),
        language: block.type === 'code' ? block.language : undefined,
        video_preview:
          block.type === 'video'
            ? (String(block.video_preview || '').trim() || undefined)
            : undefined,
      });
      navigate(-1);
    } catch {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    } finally {
      setSaving(false);
    }
  };


  if (loading) {
    return (
      <Layout>
        <Center>
          <Loader />
        </Center>
      </Layout>
    );
  }

  if (!block) {
    return (
      <Layout>
        <Notification color="red">–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</Notification>
      </Layout>
    );
  }

  return (
    <Layout>
      <Container size="sm">
        <Title order={2} ta="center" mb="lg">
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
        </Title>

        {error && (
          <Notification color="red" mb="lg" onClose={() => setError(null)}>
            {error}
          </Notification>
        )}

        <Select
          label="–¢–∏–ø –±–ª–æ–∫–∞"
          data={blockTypes}
          value={block.type}
          onChange={(val) => {
            const t = (val as BlockType) || 'text';
            setBlock({
              ...block,
              type: t,
              language: t === 'code' ? (block.language || 'plaintext') : undefined,
            });
          }}
          mb="md"
        />



        <TextInput
          label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
          value={block.title}
          onChange={(e) => setBlock({ ...block, title: e.currentTarget.value })}
          mb="md"
        />

        {block.type === 'text' && (
          <Textarea
            label="–ö–æ–Ω—Ç–µ–Ω—Ç"
            value={block.content}
            onChange={(e) => setBlock({ ...block, content: e.currentTarget.value })}
            mb="md"
            autosize
            minRows={5}
          />
        )}

        {block.type === 'code' && (
          <>

            <Select
              label="–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
              data={SUPPORTED_LANGUAGES}
              value={block.language || 'plaintext'}
              onChange={(val) => setBlock({ ...block, language: (val as Lang) || 'plaintext' })}
              mb="md"
              searchable
              nothingFoundMessage="–Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
              description="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"
            />

            
            <Textarea
              label="–ö–æ–¥"
              value={block.content}
              onChange={(e) => setBlock({ ...block, content: e.currentTarget.value })}
              mb="md"
              autosize
              minRows={10}
              styles={{
                input: { 
                  fontFamily: 'JetBrains Mono, Consolas, Monaco, monospace',
                  fontSize: '14px'
                }
              }}
              description={`–ö–æ–¥ –Ω–∞ ${SUPPORTED_LANGUAGES.find(l => l.value === block.language)?.label || 'Plain Text'}`}
            />

            {block.content && (
              <Paper shadow="xs" p="md" mb="md" withBorder>
                <Text size="sm" fw={500} mb="xs"> –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</Text>
                <Code block style={{ 
                  maxHeight: 200, 
                  overflow: 'auto',
                  fontFamily: 'JetBrains Mono, Consolas, Monaco, monospace' 
                }}>
                  {block.content}
                </Code>
              </Paper>
            )}
          </>
        )}

        {block.type === 'image' && (
          <>
            <FileInput
              label="–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
              onChange={(file) => file && handleFileUpload(file)}
              accept="image/*"
              mb="md"
              disabled={uploading}
            />
            {uploading && <Loader size="sm" mb="md" />}
            {block.content && (
              <Image src={block.content} height={150} radius="sm" mb="md" />
            )}
            <TextInput
              label="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª"
              value={block.content}
              onChange={(e) => setBlock({ ...block, content: e.currentTarget.value })}
              mb="md"
            />
          </>
        )}

        {block.type === 'video' && (
          <>
            <Alert color="blue" mb="md">
              <strong>üé• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ</strong>
              <br />
              –í–∏–¥–µ–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
            </Alert>

            <FileInput
              label="–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ"
              description="–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω HLS-–ø–æ—Ç–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏"
              onChange={(file) => file && handleVideoUpload(file)}
              accept="video/mp4,video/webm,video/quicktime"
              mb="md"
              disabled={uploading || videoProcessing}
            />

            {videoProcessing && (
              <div style={{ marginBottom: '1rem' }}>
                <Progress value={videoProcessingProgress} mb="xs" />
                <p style={{ fontSize: '14px', color: '#666' }}>
                  {videoProcessingProgress < 50 
                    ? `–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ... ${videoProcessingProgress}%`
                    : `–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ... ${videoProcessingProgress}%`
                  }
                </p>
              </div>
            )}

            {block.content && (
              <>
                <Alert color="green" mb="md">
                  ‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                  <br />
                  <small>HLS –ø–ª–µ–π–ª–∏—Å—Ç: {block.content}</small>
                </Alert>
                <TextInput
                  label="HLS –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç URL"
                  value={block.content}
                  onChange={(e) => setBlock({ ...block, content: e.currentTarget.value })}
                  mb="md"
                />
              </>
            )}

            <FileInput
              label="–ü—Ä–µ–≤—å—é –∫ –≤–∏–¥–µ–æ"
              onChange={(file) => file && handleVideoPreviewUpload(file)}
              accept="image/*"
              mb="md"
              disabled={uploading}
            />
            {block.video_preview && (
              <>
                <Image src={block.video_preview} height={100} radius="sm" mb="xs" />
                <TextInput
                  label="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–≤—å—é"
                  value={block.video_preview}
                  onChange={(e) =>
                    setBlock({ ...block, video_preview: e.currentTarget.value })
                  }
                  mb="md"
                />
              </>
            )}
          </>
        )}

        <NumberInput
          label="–ü–æ—Ä—è–¥–æ–∫"
          value={block.order}
          onChange={(v) => setBlock({ ...block, order: Number(v) || 1 })}
          min={1}
          mb="md"
        />


        <Button fullWidth mt="lg" onClick={handleSave} loading={saving}>
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </Button>
      </Container>
    </Layout>
  );
}