// admin-frontend/src/pages/BlockCreatePage.tsx (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤)

import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { blocksApi, uploadApi } from '../services/adminApi';
import Layout from '../components/Layout';

import {
  Container,
  Title,
  TextInput,
  Textarea,
  Select,
  NumberInput,
  Button,
  Notification,
  FileInput,
  Loader,
  Image,
  Alert,
  Progress,
  Text,
  Code,
  Paper,
} from '@mantine/core';

const blockTypes = [
  { value: 'text', label: '–¢–µ–∫—Å—Ç' },
  { value: 'video', label: '–í–∏–¥–µ–æ' },
  { value: 'code', label: '–ö–æ–¥' },
  { value: 'image', label: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' },
];

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
const SUPPORTED_LANGUAGES = [
  { value: 'python', label: 'Python' },
  { value: 'javascript', label: 'JavaScript' },
  { value: 'typescript', label: 'TypeScript' },
  { value: 'tsx', label: 'TypeScript React (TSX)' },
  { value: 'jsx', label: 'JavaScript React (JSX)' },
  { value: 'html', label: 'HTML' },
  { value: 'css', label: 'CSS' },
  { value: 'scss', label: 'SCSS' },
  { value: 'sql', label: 'SQL' },
  { value: 'json', label: 'JSON' },
  { value: 'yaml', label: 'YAML' },
  { value: 'bash', label: 'Bash/Shell' },
  { value: 'java', label: 'Java' },
  { value: 'csharp', label: 'C#' },
  { value: 'cpp', label: 'C++' },
  { value: 'go', label: 'Go' },
  { value: 'rust', label: 'Rust' },
  { value: 'php', label: 'PHP' },
  { value: 'ruby', label: 'Ruby' },
  { value: 'markdown', label: 'Markdown' },
  { value: 'dockerfile', label: 'Dockerfile' },
  { value: 'plaintext', label: 'Plain Text' },
];

type BlockType = 'text' | 'video' | 'code' | 'image';
type Lang = typeof SUPPORTED_LANGUAGES[number]['value'];

export default function BlockCreatePage() {
  const { moduleId } = useParams<{ moduleId: string }>();
  const navigate = useNavigate();

  const [type, setType] = useState<BlockType>('text');
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [order, setOrder] = useState(1);
  const [language, setLanguage] = useState<Lang>('plaintext');
  const [videoPreview, setVideoPreview] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [loadingUpload, setLoadingUpload] = useState(false);
  const [videoProcessing, setVideoProcessing] = useState(false);
  const [videoProcessingProgress, setVideoProcessingProgress] = useState(0);

  const handleFileUpload = async (file: File) => {
    try {
      setLoadingUpload(true);
      setError(null);
      const res = await uploadApi.uploadImage(file);      // ‚¨ÖÔ∏è
      const url = res?.url || res?.image || '';
      if (!url) throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É');
      setContent(url);
    } catch (e) {
      console.error(e);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
    } finally {
      setLoadingUpload(false);
    }
  };

  const handleVideoUpload = async (file: File) => {
    try {
      setVideoProcessing(true);
      setVideoProcessingProgress(0);
      setError(null);

      // –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–ø–ª–æ–∞–¥–∞ –º–æ–∂–Ω–æ –ø–æ–≤–µ—Å–∏—Ç—å –Ω–∞ axios, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî —Ç–æ–≥–¥–∞ –¥–æ–±–∞–≤—å –æ–±–µ—Ä—Ç–∫—É –≤ uploadApi
      const res = await uploadApi.uploadVideo(file);      // ‚¨ÖÔ∏è
      // –æ–∂–∏–¥–∞–µ–º –ø–æ–ª–µ master_playlist_url –∏–ª–∏ url
      const url = res?.master_playlist_url || res?.url || '';
      if (!url) throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª URL –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç–∞');

      // —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
      for (let i = 50; i <= 100; i += 10) {
        // @ts-ignore
        await new Promise(r => setTimeout(r, 500));
        setVideoProcessingProgress(i);
      }
      setContent(url);
    } catch (e) {
      console.error(e);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ');
    } finally {
      setVideoProcessing(false);
      setVideoProcessingProgress(0);
    }
  };

  const handleVideoPreviewUpload = async (file: File) => {
    try {
      setLoadingUpload(true);
      const res = await uploadApi.uploadImage(file, 'video-previews'); // ‚¨ÖÔ∏è
      const url = res?.url || res?.image || '';
      setVideoPreview(url);
    } catch (e) {
      console.error(e);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é');
    } finally {
      setLoadingUpload(false);
    }
  };

  const handleSubmit = async () => {
    if (!moduleId) { setError('–ù–µ —É–∫–∞–∑–∞–Ω ID –º–æ–¥—É–ª—è'); return; }
    try {
      await blocksApi.createBlock(Number(moduleId), {
        type,
        title,
        content: content.trim(),
        order,
        language: type === 'code' ? language : undefined,
        video_preview: type === 'video' ? (videoPreview.trim() || undefined) : undefined,
      });                                                // ‚¨ÖÔ∏è
      navigate(-1);
    } catch (e) {
      console.error(e);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–∫–∞');
    }
  };

  return (
    <Layout>
      <Container size="sm">
        <Title order={2} ta="center" mb="lg">–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞</Title>

        {error && (
          <Notification color="red" mb="lg" onClose={() => setError(null)}>
            {error}
          </Notification>
        )}

        <Select
          label="–¢–∏–ø –±–ª–æ–∫–∞"
          data={blockTypes}
          value={type}
          onChange={(val) => setType((val as BlockType) || 'text')}
          mb="md"
        />

        <TextInput
          label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
          value={title}
          onChange={(e) => setTitle(e.currentTarget.value)}
          mb="md"
        />

        {type === 'text' && (
          <Textarea
            label="–ö–æ–Ω—Ç–µ–Ω—Ç"
            value={content}
            onChange={(e) => setContent(e.currentTarget.value)}
            mb="md"
            autosize
            minRows={5}
          />
        )}

        {type === 'code' && (
          <>
            <Select
              label="–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
              data={SUPPORTED_LANGUAGES}
              value={language}
              onChange={(val) => setLanguage((val as Lang) || 'plaintext')}
              mb="md"
              searchable
              nothingFoundMessage="–Ø–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
              description="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"
            />
            
            <Textarea
              label="–ö–æ–¥"
              value={content}
              onChange={(e) => setContent(e.currentTarget.value)}
              mb="md"
              autosize
              minRows={10}
              styles={{
                input: { 
                  fontFamily: 'JetBrains Mono, Consolas, Monaco, monospace',
                  fontSize: '14px'
                }
              }}
              description={`–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–∞ ${SUPPORTED_LANGUAGES.find(l => l.value === language)?.label}`}
            />

            {content && (
              <Paper shadow="xs" p="md" mb="md" withBorder>
              <Text size="sm" fw={500} mb="xs">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</Text>
                <Code block style={{ 
                  maxHeight: 200, 
                  overflow: 'auto',
                  fontFamily: 'JetBrains Mono, Consolas, Monaco, monospace' 
                }}>
                  {content}
                </Code>
              </Paper>
            )}
          </>
        )}

        {type === 'image' && (
          <>
            <FileInput
              label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
              onChange={(file) => file && handleFileUpload(file)}
              accept="image/png,image/jpeg,image/webp"
              disabled={loadingUpload}
              mb="md"
            />
            {loadingUpload && <Loader size="sm" mb="md" />}
            {content && (
              <>
                <Image src={content} height={150} radius="sm" mb="sm" />
                <TextInput
                  label="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª"
                  value={content}
                  onChange={(e) => setContent(e.currentTarget.value)}
                  mb="md"
                />
              </>
            )}
          </>
        )}

        {type === 'video' && (
          <>
            <Alert color="blue" mb="md">
              <strong>üé• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ</strong>
              <br />
              –í–∏–¥–µ–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, WebM, MOV.
            </Alert>

            <FileInput
              label="–í–∏–¥–µ–æ —Ñ–∞–π–ª"
              description="–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω HLS-–ø–æ—Ç–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞–º–∏"
              accept="video/mp4,video/webm,video/quicktime"
              onChange={(file) => file && handleVideoUpload(file)}
              disabled={videoProcessing || loadingUpload}
              mb="md"
            />

            {videoProcessing && (
              <div style={{ marginBottom: '1rem' }}>
                <Progress value={videoProcessingProgress} mb="xs" />
                <p style={{ fontSize: '14px', color: '#666' }}>
                  {videoProcessingProgress < 50 
                    ? `–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ... ${videoProcessingProgress}%`
                    : `–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ... ${videoProcessingProgress}%`
                  }
                </p>
              </div>
            )}

            {content && (
              <Alert color="green" mb="md">
                ‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!
                <br />
                <small>HLS –ø–ª–µ–π–ª–∏—Å—Ç: {content}</small>
              </Alert>
            )}

            {content && (
              <TextInput
                label="HLS –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç URL"
                value={content}
                onChange={(e) => setContent(e.currentTarget.value)}
                mb="md"
                description="URL –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"
              />
            )}

            <FileInput
              label="–ü—Ä–µ–≤—å—é –∫ –≤–∏–¥–µ–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              accept="image/png,image/jpeg,image/webp"
              onChange={(file) => file && handleVideoPreviewUpload(file)}
              disabled={loadingUpload}
              mb="md"
            />
            {videoPreview && (
              <>
                <Image src={videoPreview} height={100} radius="sm" mb="xs" />
                <TextInput
                  label="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–≤—å—é"
                  value={videoPreview}
                  onChange={(e) => setVideoPreview(e.currentTarget.value)}
                  mb="md"
                />
              </>
            )}
          </>
        )}

        <NumberInput
          label="–ü–æ—Ä—è–¥–æ–∫"
          value={order}
          onChange={(v) => setOrder((v as number) || 1)}
          min={1}
          mb="md"
        />

        <Button 
          fullWidth 
          mt="lg" 
          onClick={handleSubmit} 
          disabled={loadingUpload || videoProcessing}
          loading={loadingUpload || videoProcessing}
        >
          –°–æ–∑–¥–∞—Ç—å –±–ª–æ–∫
        </Button>
      </Container>
    </Layout>
  );
}