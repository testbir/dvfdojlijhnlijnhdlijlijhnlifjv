// src/pages/CourseEditPage.tsx


import { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from '../api/axiosInstance';
import { DateTimePicker } from '@mantine/dates';
import '@mantine/dates/styles.css';
import dayjs from 'dayjs';


import {
  Container,
  Title,
  TextInput,
  Textarea,
  NumberInput,
  Button,
  Loader,
  Center,
  Notification,
  Switch,
  FileInput,
  Image,
  Alert,
  Progress,
} from '@mantine/core';
import Layout from '../components/Layout';

interface Course {
  id: number;
  title: string;
  short_description?: string;
  full_description?: string;
  image?: string;
  is_free: boolean;
  price?: number;
  discount?: number;
  video?: string;
  video_preview?: string;
  banner_text?: string;
  banner_color_left?: string;
  banner_color_right?: string;
  group_title?: string;
  order?: number;
  discount_start?: string;
  discount_until?: string;
}

export default function CourseEditPage() {
  const { courseId } = useParams<{ courseId: string }>();
  const [course, setCourse] = useState<Course | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [videoProcessing, setVideoProcessing] = useState(false);
  const [videoProcessingProgress, setVideoProcessingProgress] = useState(0);
  const [error, setError] = useState<string | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    const fetchCourse = async () => {
      try {
        const res = await axios.get(`/admin/courses/${courseId}`);
        console.log("–ö—É—Ä—Å —Å —Å–µ—Ä–≤–µ—Ä–∞:", res.data); // ‚Üê –ø—Ä–æ–≤–µ—Ä—å –ø–æ–ª—è discount_start/discount_until
        setCourse(res.data);
      } catch {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–∞');
      } finally {
        setLoading(false);
      }
    };
    fetchCourse();
  }, [courseId]);


  const uploadFile = async (file: File, isContent: boolean) => {
    try {
      setUploading(true);
      const formData = new FormData();
      formData.append('file', file);
      const url = isContent ? '/admin/upload/content' : '/admin/upload/public';
      const res = await axios.post(url, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
      });
      return res.data;
    } catch {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
      return null;
    } finally {
      setUploading(false);
    }
  };

  // üé¨ –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ (–∫–∞–∫ –≤ CourseCreatePage)
  // admin-frontend/src/pages/CourseEditPage.tsx - –ó–ê–ú–ï–ù–ò–¢–ï –§–£–ù–ö–¶–ò–Æ handleVideoUpload:

const handleVideoUpload = async (file: File | null): Promise<void> => {
  if (!file) return;
  
  try {
    setVideoProcessing(true);
    setVideoProcessingProgress(0);
    setError(null);
    
    const formData = new FormData();
    formData.append('file', file);
    
    const res = await axios.post('/admin/upload/video', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
      timeout: 60000, // 1 –º–∏–Ω—É—Ç–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
      onUploadProgress: (progressEvent) => {
        if (progressEvent.total) {
          const uploadProgress = Math.round((progressEvent.loaded * 30) / progressEvent.total);
          setVideoProcessingProgress(uploadProgress);
        }
      }
    });

    if (res.data.video_id) {
      // –û–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
      const finalResult = await pollVideoStatus(res.data.video_id);
      if (finalResult) {
        setCourse(prev => prev ? { ...prev, video: finalResult } : prev);
        console.log('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:', finalResult);
      }
    }
    
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:', err);
    setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ');
  } finally {
    setVideoProcessing(false);
    setVideoProcessingProgress(0);
  }
};

const pollVideoStatus = async (videoId: string): Promise<string | null> => {
  const maxAttempts = 120; // 20 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º (120 * 10 —Å–µ–∫—É–Ω–¥)
  
  for (let i = 0; i < maxAttempts; i++) {
    try {
      const statusRes = await axios.get(`/admin/video-status/${videoId}`);
      const status = statusRes.data;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = 30 + Math.round((i / maxAttempts) * 70);
      setVideoProcessingProgress(Math.min(progress, 95));
      
      if (status.status === 'completed' && status.result?.master_playlist_url) {
        setVideoProcessingProgress(100);
        return status.result.master_playlist_url;
      }
      
      if (status.status === 'failed') {
        throw new Error(status.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ');
      }
      
      // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 10000));
      
    } catch (err: any) {
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞, –∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
      if (i > 5 && err.response?.status !== 404) {
        throw err;
      }
      await new Promise(resolve => setTimeout(resolve, 10000));
    }
  }
  
  throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ');
};

  const handleSave = async () => {
    if (!course) return;
    setSaving(true);
    try {
      await axios.put(`/admin/courses/${courseId}`, {
        title: course.title?.trim(),
        short_description: course.short_description?.trim() || undefined,
        full_description: course.full_description?.trim() || undefined,
        image: course.image?.trim() || undefined,
        is_free: course.is_free,
        price: course.is_free ? undefined : course.price ?? 0,
        discount: course.is_free ? undefined : course.discount ?? 0,
        video: course.video?.trim() || undefined,
        video_preview: course.video_preview?.trim() || undefined,
        banner_text: course.banner_text?.trim() || undefined,
        banner_color_left: course.banner_color_left?.trim() || undefined,
        banner_color_right: course.banner_color_right?.trim() || undefined,
        group_title: course.group_title?.trim() || undefined,
        order: course.order ?? 0,
        discount_start: course.discount_start ?? undefined,
        discount_until: course.discount_until ?? undefined,

      });
      navigate('/');
    } catch {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <Layout>
        <Center><Loader /></Center>
      </Layout>
    );
  }

  if (error && !course) {
    return (
      <Layout>
        <Notification color="red">{error}</Notification>
      </Layout>
    );
  }

  return (
    <Layout>
      <Container size="sm">
        <Title order={2} ta="center" mb="lg">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞</Title>

        {error && (
          <Notification color="red" mb="lg" onClose={() => setError(null)}>
            {error}
          </Notification>
        )}

        <TextInput
          label="–ù–∞–∑–≤–∞–Ω–∏–µ"
          value={course?.title || ''}
          onChange={(e) => setCourse({ ...course!, title: e.currentTarget.value })}
          mb="md"
        />

        <TextInput
          label="–ì—Ä—É–ø–ø–∞ –∫—É—Ä—Å–∞"
          value={course?.group_title || ''}
          onChange={(e) => setCourse({ ...course!, group_title: e.currentTarget.value })}
          mb="md"
        />

        <NumberInput
          label="–ü–æ—Ä—è–¥–æ–∫ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ –∫—É—Ä—Å)"
          value={course?.order ?? 0}
          onChange={(val) => setCourse({ ...course!, order: typeof val === 'number' ? val : 0 })}
          min={0}
          mb="md"
        />

        <Textarea
          label="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
          value={course?.short_description || ''}
          onChange={(e) => setCourse({ ...course!, short_description: e.currentTarget.value })}
          mb="md"
        />

        <Textarea
          label="–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
          value={course?.full_description || ''}
          onChange={(e) => setCourse({ ...course!, full_description: e.currentTarget.value })}
          autosize
          minRows={4}
          mb="md"
        />

        <FileInput
          label="–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
          accept="image/png,image/jpeg,image/webp"
          onChange={async (file) => {
            if (file) {
              const res = await uploadFile(file, false);
              if (res?.url) setCourse((prev) => prev ? { ...prev, image: res.url } : prev);
            }
          }}
          mb="md"
        />
        {uploading && <Loader size="sm" mb="md" />}
        {course?.image && <Image src={course.image} alt="–ü—Ä–µ–≤—å—é" height={200} radius="md" mb="xs" />}
        <TextInput
          label="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
          value={course?.image || ''}
          onChange={(e) => setCourse({ ...course!, image: e.currentTarget.value })}
          mb="md"
        />

        <Switch
          label="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å"
          checked={course?.is_free || false}
          onChange={(e) => setCourse({ ...course!, is_free: e.currentTarget.checked })}
          mb="md"
        />


        {!course?.is_free && (
        <>
          <NumberInput
            label="–¶–µ–Ω–∞"
            value={course?.price ?? 0}
            onChange={(val) => setCourse({ ...course!, price: val as number })}
            mb="md"
          />
          <NumberInput
            label="–°–∫–∏–¥–∫–∞"
            value={course?.discount ?? 0}
            onChange={(val) => setCourse({ ...course!, discount: val as number })}
            mb="md"
          />

          <DateTimePicker
            label="–ù–∞—á–∞–ª–æ —Å–∫–∏–¥–∫–∏"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"
            value={course?.discount_start ? dayjs(course.discount_start).toDate() : null}
            onChange={(val) =>
              setCourse({
                ...course!,
                discount_start: val ? dayjs(val).toISOString() : undefined,
              })
            }
            valueFormat="DD.MM.YYYY HH:mm"
            mb="md"
          />

          <DateTimePicker
            label="–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"
            value={course?.discount_until ? dayjs(course.discount_until).toDate() : null}
            onChange={(val) =>
              setCourse({
                ...course!,
                discount_until: val ? dayjs(val).toISOString() : undefined,
              })
            }
            valueFormat="DD.MM.YYYY HH:mm"
            mb="md"
          />



        <Button
            color="red"
            variant="outline"
            onClick={() =>
              setCourse((prev) =>
                prev
                  ? {
                      ...prev,
                      discount: 0,
                      discount_start: undefined,
                      discount_until: undefined,
                    }
                  : prev
              )
            }
            mb="md"
        >
            –û—Ç–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É
        </Button>






        </>
      )}


        {/* üé¨ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å–µ–∫—Ü–∏—è –≤–∏–¥–µ–æ —Å HLS –æ–±—Ä–∞–±–æ—Ç–∫–æ–π */}
        <Alert color="blue" mb="md">
          <strong>üé• –ó–∞–º–µ–Ω–∞ –≤–∏–¥–µ–æ –∫—É—Ä—Å–∞</strong>
          <br />
          –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.
          –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, WebM, MOV (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è MP4).
        </Alert>

        <FileInput
          label="–ó–∞–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ –∫—É—Ä—Å–∞"
          description="–í–∏–¥–µ–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤"
          accept="video/mp4,video/webm,video/mov"
          onChange={handleVideoUpload}
          disabled={videoProcessing || uploading}
          mb="md"
        />

        {videoProcessing && (
          <div style={{ marginBottom: '1rem' }}>
            <Progress value={videoProcessingProgress} mb="xs" />
            <p style={{ fontSize: '14px', color: '#666' }}>
              {videoProcessingProgress < 50 
                ? `–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ... ${videoProcessingProgress}%`
                : `–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ... ${videoProcessingProgress}%`
              }
            </p>
          </div>
        )}

        {course?.video && (
          <>
            {course.video.includes('.m3u8') ? (
              <Alert color="green" mb="md">
                ‚úÖ HLS –≤–∏–¥–µ–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ!
                <br />
                <small>–ú–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç: {course.video}</small>
              </Alert>
            ) : (
              <Alert color="orange" mb="md">
                ‚ö†Ô∏è –û–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ HLS)
              </Alert>
            )}
            <TextInput
              label="URL –≤–∏–¥–µ–æ (HLS –º–∞—Å—Ç–µ—Ä-–ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ)"
              value={course.video}
              onChange={(e) => setCourse((prev) => prev ? { ...prev, video: e.currentTarget.value } : prev)}
              mb="md"
            />
          </>
        )}

        <FileInput
          label="–ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–≤—å—é –∫ –≤–∏–¥–µ–æ (jpg/png/webp)"
          accept="image/png,image/jpeg,image/webp"
          onChange={async (file) => {
            if (file) {
              const res = await uploadFile(file, true);
              if (res?.url) setCourse((prev) => prev ? { ...prev, video_preview: res.url } : prev);
            }
          }}
          mb="md"
        />
        {course?.video_preview && (
          <>
            <Image src={course.video_preview} alt="–ü—Ä–µ–≤—å—é" height={120} radius="sm" mb="xs" />
            <TextInput
              label="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–≤—å—é"
              value={course.video_preview}
              onChange={(e) => setCourse((prev) => prev ? { ...prev, video_preview: e.currentTarget.value } : prev)}
              mb="md"
            />
          </>
        )}

        <TextInput
          label="–¢–µ–∫—Å—Ç –±–∞–Ω–Ω–µ—Ä–∞"
          value={course?.banner_text || ''}
          onChange={(e) => setCourse({ ...course!, banner_text: e.currentTarget.value })}
          mb="md"
        />
        <TextInput
          label="–¶–≤–µ—Ç —Å–ª–µ–≤–∞ (hex)"
          value={course?.banner_color_left || ''}
          onChange={(e) => setCourse({ ...course!, banner_color_left: e.currentTarget.value })}
          mb="md"
        />
        <TextInput
          label="–¶–≤–µ—Ç —Å–ø—Ä–∞–≤–∞ (hex)"
          value={course?.banner_color_right || ''}
          onChange={(e) => setCourse({ ...course!, banner_color_right: e.currentTarget.value })}
          mb="md"
        />

        <Button 
          fullWidth 
          onClick={handleSave} 
          loading={saving} 
          disabled={videoProcessing || uploading}
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </Button>
      </Container>
    </Layout>
  );
}
