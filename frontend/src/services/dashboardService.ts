// src/services/dashboardService.ts

// src/services/dashboardService.ts

import catalogApi from "../api/catalogApi";
// –£–±–∏—Ä–∞–µ–º authApi, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ catalogApi

export interface UserStats {
  total_courses: number;
  completed_courses: number;
  total_progress_percent: number;
}

export interface UserCourse {
  course_id: number;
  course_title: string;
  image: string | null;
  progress_percent: number;
  is_completed: boolean;
  purchased_at: string;
}

export interface DashboardData {
  user_id: number;
  stats: UserStats;
  courses: UserCourse[];
  recent_progress: Array<{
    course_id: number;
    course_title: string;
    total_modules: number;
    completed_modules: number;
    progress_percent: number;
  }>;
}

export interface UserData {
  id: number;
  username: string;
  email: string;
}

class DashboardService {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ catalog_service (–∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç auth_service)
  async getUserData(): Promise<UserData> {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ catalog API...');
      const response = await catalogApi.get('/api/profile/');
      console.log('üìã –û—Ç–≤–µ—Ç API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response);
      console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', response.data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
      if (!response.data) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
      }
      
      if (!response.data.username) {
        console.warn('‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username:', response.data);
      }
      
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ dashboard –¥–∞–Ω–Ω—ã—Ö –∏–∑ catalog_service
  async getDashboardData(): Promise<DashboardData> {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö dashboard –∫ API...');
      const response = await catalogApi.get('/api/dashboard/');
      console.log('üìã –û—Ç–≤–µ—Ç API dashboard:', response);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö dashboard:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å)
  async getUserStats(): Promise<UserStats> {
    const response = await catalogApi.get('/api/stats/');
    return response.data;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getMyCourses() {
    const response = await catalogApi.get('/api/my-courses/');
    return response.data;
  }

  // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
  async getFullDashboard(): Promise<{
    userData: UserData;
    dashboardData: DashboardData;
  }> {
    try {
      console.log('üì° –ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö dashboard...');
      
      // –¢–µ–ø–µ—Ä—å –æ–±–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–¥—É—Ç –∫ catalog_service
      const [userResponse, dashboardResponse] = await Promise.all([
        this.getUserData(),
        this.getDashboardData()
      ]);

      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      return {
        userData: userResponse,
        dashboardData: dashboardResponse
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö dashboard:', error);
      throw error;
    }
  }

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  private cachedData: {
    userData: UserData | null;
    dashboardData: DashboardData | null;
    timestamp: number;
  } = {
    userData: null,
    dashboardData: null,
    timestamp: 0
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (5 –º–∏–Ω—É—Ç)
  async getCachedDashboard(forceRefresh = false): Promise<{
    userData: UserData;
    dashboardData: DashboardData;
  }> {
    const CACHE_TIME = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    const now = Date.now();
    
    if (
      !forceRefresh &&
      this.cachedData.userData &&
      this.cachedData.dashboardData &&
      (now - this.cachedData.timestamp) < CACHE_TIME
    ) {
      console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return {
        userData: this.cachedData.userData,
        dashboardData: this.cachedData.dashboardData
      };
    }

    const data = await this.getFullDashboard();
    
    this.cachedData = {
      userData: data.userData,
      dashboardData: data.dashboardData,
      timestamp: now
    };

    return data;
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  clearCache() {
    this.cachedData = {
      userData: null,
      dashboardData: null,
      timestamp: 0
    };
  }
}

export default new DashboardService();