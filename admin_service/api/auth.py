#admin_service/api/auth.py


from fastapi import APIRouter, Depends, HTTPException, Body
from sqlalchemy.orm import Session
from db import get_db
from models.admin import AdminUser
from schemas import AdminLogin, TokenResponse
from utils.security import verify_password, create_access_token

router = APIRouter(prefix="/auth", tags=["Auth"])

@router.post("/login", response_model=TokenResponse)
def login(
    data: AdminLogin = Body(...),  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º Body
    db: Session = Depends(get_db)
):
    print("üîê –ü–æ–ª—É—á–µ–Ω –ª–æ–≥–∏–Ω:", data.username)
    print("üîê –ü–∞—Ä–æ–ª—å:", data.password)

    user = db.query(AdminUser).filter(AdminUser.username == data.username).first()
    if not user:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    if not verify_password(data.password, user.hashed_password):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    token = create_access_token({"sub": str(user.id)})
    print("‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω")

    return {"access_token": token, "token_type": "bearer"}
