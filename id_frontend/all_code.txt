

/* ===== C:\Users\icipa\team-platform-public\id_frontend\Dockerfile ===== */

# build
FROM node:20-alpine AS build
WORKDIR /app
COPY package*.json ./
RUN npm ci
ARG VITE_API_BASE=/idp
ARG VITE_CLIENT_ID=id_frontend
ENV VITE_API_BASE=$VITE_API_BASE
ENV VITE_CLIENT_ID=$VITE_CLIENT_ID
COPY . .
RUN npm run build

# serve
FROM nginx:1.27-alpine
COPY --from=build /app/dist /usr/share/nginx/html
# SPA fallback + РєСЌС€ Р°СЃСЃРµС‚РѕРІ
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80



/* ===== C:\Users\icipa\team-platform-public\id_frontend\eslint.config.js ===== */

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])



/* ===== C:\Users\icipa\team-platform-public\id_frontend\index.html ===== */

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



/* ===== C:\Users\icipa\team-platform-public\id_frontend\package.json ===== */

{
  "name": "id_frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.11.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-router-dom": "^7.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "sass": "^1.90.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}



/* ===== C:\Users\icipa\team-platform-public\id_frontend\README.md ===== */

# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```



/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\api\client.ts ===== */

// ============= src/api/client.ts =============

import axios, { type AxiosInstance, AxiosError, type InternalAxiosRequestConfig } from 'axios'
import { type TokenResponse } from '../types/oauth.types'
import {
  TOKEN_STORAGE_KEY,
  REFRESH_TOKEN_STORAGE_KEY,
  ID_TOKEN_STORAGE_KEY,
} from '../utils/constants'

const API_BASE = import.meta.env.VITE_API_BASE ?? ''

class ApiClient {
  private client: AxiosInstance
  private refreshPromise: Promise<TokenResponse> | null = null

  constructor() {
    this.client = axios.create({
      baseURL: API_BASE,          // '' РІ dev, '/idp' РІ prod
      timeout: 30000,
      headers: { 'Content-Type': 'application/json' },
      withCredentials: true,
    })
    this.setupInterceptors()
  }

  private setupInterceptors() {
    this.client.interceptors.request.use((config) => {
      const token = this.getAccessToken()
      if (token) {
        config.headers = { ...config.headers, Authorization: `Bearer ${token}` }
      }
      return config
    })

    this.client.interceptors.response.use(
      (r) => r,
      async (error: AxiosError) => {
        const original = error.config as (InternalAxiosRequestConfig & { _retry?: boolean }) | undefined
        const status = error.response?.status
        const url = original?.url || ''
        // РЅРµ СЂРµС„СЂРµС€РёРј СЃР°Рј /oauth/token Рё РёР·Р±РµРіР°РµРј С†РёРєР»РѕРІ
        if (
          status === 401 &&
          original &&
          !original._retry &&
          !url.startsWith('/oauth/token') &&
          this.getRefreshToken()
        ) {
          original._retry = true
          try {
            await this.refreshToken()
            const token = this.getAccessToken()
            if (token && original.headers) original.headers.Authorization = `Bearer ${token}`
            return this.client(original)
          } catch (e) {
            this.clearTokens()
            window.location.href = '/login'
            throw e
          }
        }
        throw error
      }
    )
  }

  private getAccessToken() { return localStorage.getItem(TOKEN_STORAGE_KEY) }
  private getRefreshToken() { return localStorage.getItem(REFRESH_TOKEN_STORAGE_KEY) }

  private setTokens(tokens: TokenResponse) {
    localStorage.setItem(TOKEN_STORAGE_KEY, tokens.access_token)
    if (tokens.refresh_token) localStorage.setItem(REFRESH_TOKEN_STORAGE_KEY, tokens.refresh_token)
    if (tokens.id_token) localStorage.setItem(ID_TOKEN_STORAGE_KEY, tokens.id_token)
  }

  private clearTokens() {
    localStorage.removeItem(TOKEN_STORAGE_KEY)
    localStorage.removeItem(REFRESH_TOKEN_STORAGE_KEY)
    localStorage.removeItem(ID_TOKEN_STORAGE_KEY)
  }

private async refreshToken(): Promise<TokenResponse> {
  if (this.refreshPromise) return this.refreshPromise
  const refreshToken = this.getRefreshToken()
  if (!refreshToken) throw new Error('No refresh token')

  const body = new URLSearchParams({
    grant_type: 'refresh_token',
    refresh_token: refreshToken,
    client_id: import.meta.env.VITE_CLIENT_ID || 'id_frontend',
  })

  this.refreshPromise = this.client
    .post<TokenResponse>('/oauth/token', body, {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    })
    .then(({ data }) => { this.setTokens(data); this.refreshPromise = null; return data })
    .catch((e) => { this.refreshPromise = null; throw e })

  return this.refreshPromise
}

  getClient() { return this.client }
  saveTokens(tokens: TokenResponse) { this.setTokens(tokens) }
  logout() { this.clearTokens() }
}

export const apiClient = new ApiClient()
export const api = apiClient.getClient()



/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\api\endpoints.ts ===== */

// ============= src/api/endpoints.ts =============

export const API_ENDPOINTS = {
  // Auth endpoints
  AUTH: {
    LOGIN: '/api/auth/login',
    REGISTER: '/api/auth/register',
    VERIFY_EMAIL: '/api/auth/verify-email',
    RESEND_CODE: '/api/auth/resend-code',
    FORGOT_PASSWORD: '/api/auth/forgot-password',
    RESET_PASSWORD: '/api/auth/reset-password',
    ME: '/api/auth/me',
  },
  
  // OAuth endpoints
  OAUTH: {
    AUTHORIZE: '/oauth/authorize',
    TOKEN: '/oauth/token',
    USERINFO: '/oauth/userinfo',
    REVOKE: '/oauth/revoke',
    JWKS: '/.well-known/jwks.json',
    DISCOVERY: '/.well-known/openid-configuration',
  },
  
  // Session endpoints
  SESSION: {
    LOGOUT: '/api/session/logout',
    STATUS: '/api/session/status',
  },
  
  // Client endpoints
  CLIENTS: {
    GET: (clientId: string) => `/api/clients/${clientId}`,
  },
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\App.tsx ===== */

import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css'

function App() {
  const [count, setCount] = useState(0)

  return (
    <>
      <div>
        <a href="https://vite.dev" target="_blank">
          <img src={viteLogo} className="logo" alt="Vite logo" />
        </a>
        <a href="https://react.dev" target="_blank">
          <img src={reactLogo} className="logo react" alt="React logo" />
        </a>
      </div>
      <h1>Vite + React</h1>
      <div className="card">
        <button onClick={() => setCount((count) => count + 1)}>
          count is {count}
        </button>
        <p>
          Edit <code>src/App.tsx</code> and save to test HMR
        </p>
      </div>
      <p className="read-the-docs">
        Click on the Vite and React logos to learn more
      </p>
    </>
  )
}

export default App



/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\AuthForm\AuthForm.scss ===== */

// ============= src/components/AuthForm/AuthForm.scss =============

@import '../../styles/variables.scss';

.auth-form {
  width: 100%;
  
  &__title {
    font-family: 'Open Sans', sans-serif;
    font-size: 32px;
    font-weight: 700;
    color: #258DFF;
    text-align: center;
    margin: 0 0 32px;
    
    @media (max-width: 768px) {
      font-size: 28px;
      margin-bottom: 24px;
    }
  }
  
  &__error {
    background: linear-gradient(135deg, rgba(255, 94, 94, 0.1), rgba(255, 36, 36, 0.1));
    border: 1px solid rgba(255, 94, 94, 0.3);
    border-radius: 12px;
    padding: 12px 16px;
    margin-bottom: 20px;
    color: #d32f2f;
    font-size: 14px;
    font-family: 'Open Sans', sans-serif;
    text-align: center;
    animation: shake 0.3s ease;
  }
  
  &__field {
    margin-bottom: 20px;
    position: relative;
    
    &-error {
      display: block;
      color: #d32f2f;
      font-size: 12px;
      margin-top: 4px;
      font-family: 'Open Sans', sans-serif;
    }
  }
  
  &__input {
    width: 100%;
    height: 50px;
    padding: 0 20px;
    font-family: 'Open Sans', sans-serif;
    font-size: 16px;
    font-weight: 500;
    color: #333;
    background: #F5F7FA;
    border: 2px solid transparent;
    border-radius: 12px;
    outline: none;
    transition: all 0.2s ease;
    
    &::placeholder {
      color: rgba(0, 0, 0, 0.4);
    }
    
    &:focus {
      background: white;
      border-color: #258DFF;
      box-shadow: 0 0 0 3px rgba(37, 141, 255, 0.1);
    }
    
    &--error {
      border-color: #ff4444;
      
      &:focus {
        border-color: #ff4444;
        box-shadow: 0 0 0 3px rgba(255, 68, 68, 0.1);
      }
    }
    
    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
  }
  
  &__link {
    display: inline-block;
    color: #258DFF;
    font-size: 14px;
    font-family: 'Open Sans', sans-serif;
    text-decoration: none;
    margin-bottom: 20px;
    transition: color 0.2s ease;
    
    &:hover {
      color: #1976d2;
      text-decoration: underline;
    }
  }
  
  &__submit {
    width: 100%;
    height: 50px;
    background: linear-gradient(135deg, #258DFF, #1976d2);
    color: white;
    border: none;
    border-radius: 12px;
    font-family: 'Sora', sans-serif;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
    
    &:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(37, 141, 255, 0.3);
    }
    
    &:active:not(:disabled) {
      transform: translateY(0);
    }
    
  &:disabled {
    opacity: 0.7;
  }
}
}


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\AuthForm\LoginForm.tsx ===== */

// ============= src/components/AuthForm/LoginForm.tsx =============

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { authService } from '../../services/auth.service';
import { validators } from '../../utils/validators';
import { handleApiError } from '../../utils/errors';
import { ROUTES } from '../../utils/constants';
import './AuthForm.scss';

interface LoginFormProps {
  onSuccess?: () => void;
  redirectUrl?: string;
}

export const LoginForm: React.FC<LoginFormProps> = ({ onSuccess, redirectUrl }) => {
  const [formData, setFormData] = useState({
    email: '',
    password: '',
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [generalError, setGeneralError] = useState('');

  const handleChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // РћС‡РёС‰Р°РµРј РѕС€РёР±РєСѓ РїРѕР»СЏ РїСЂРё РёР·РјРµРЅРµРЅРёРё
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
    if (generalError) {
      setGeneralError('');
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    const emailValidation = validators.email(formData.email);
    if (!emailValidation.isValid) {
      newErrors.email = emailValidation.error!;
    }
    
    const passwordValidation = validators.password(formData.password);
    if (!passwordValidation.isValid) {
      newErrors.password = passwordValidation.error!;
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsLoading(true);
    setGeneralError('');
    
    try {
      await authService.login(formData);
      
      if (onSuccess) {
        onSuccess();
      } else if (redirectUrl) {
        window.location.href = redirectUrl;
      } else {
        window.location.href = ROUTES.PROFILE;
      }
    } catch (error) {
      setGeneralError(handleApiError(error));
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form className="auth-form" onSubmit={handleSubmit}>
      <h1 className="auth-form__title">Р’С…РѕРґ</h1>
      
      {generalError && (
        <div className="auth-form__error">
          {generalError}
        </div>
      )}
      
      <div className="auth-form__field">
        <input
          type="email"
          placeholder="Email"
          value={formData.email}
          onChange={(e) => handleChange('email', e.target.value)}
          className={`auth-form__input ${errors.email ? 'auth-form__input--error' : ''}`}
          disabled={isLoading}
          autoFocus
        />
        {errors.email && (
          <span className="auth-form__field-error">{errors.email}</span>
        )}
      </div>
      
      <div className="auth-form__field">
        <input
          type="password"
          placeholder="РџР°СЂРѕР»СЊ"
          value={formData.password}
          onChange={(e) => handleChange('password', e.target.value)}
          className={`auth-form__input ${errors.password ? 'auth-form__input--error' : ''}`}
          disabled={isLoading}
        />
        {errors.password && (
          <span className="auth-form__field-error">{errors.password}</span>
        )}
      </div>
      
      <Link to={ROUTES.FORGOT_PASSWORD} className="auth-form__link">
        Р—Р°Р±С‹Р»Рё РїР°СЂРѕР»СЊ?
      </Link>
      
      <button
        type="submit"
        className="auth-form__submit"
        disabled={isLoading}
      >
        {isLoading ? (
          <span className="auth-form__submit-spinner" />
        ) : (
          'Р’РѕР№С‚Рё'
        )}
      </button>
      
      <div className="auth-form__footer">
        <span>РќРµС‚ Р°РєРєР°СѓРЅС‚Р°?</span>
        <Link to={ROUTES.REGISTER} className="auth-form__link">
          Р—Р°СЂРµРіРёСЃС‚СЂРёСЂРѕРІР°С‚СЊСЃСЏ
        </Link>
      </div>
    </form>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\AuthForm\RegisterForm.tsx ===== */

// ============= src/components/AuthForm/RegisterForm.tsx =============

import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { authService } from '../../services/auth.service';
import { validators } from '../../utils/validators';
import { handleApiError } from '../../utils/errors';
import { ROUTES } from '../../utils/constants';
import { PasswordStrength } from '../PasswordStrength/PasswordStrength';
import './AuthForm.scss';

interface RegisterFormProps {
  onSuccess?: (userId: string, email: string) => void;
}

export const RegisterForm: React.FC<RegisterFormProps> = ({ onSuccess }) => {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
    passwordConfirm: '',
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [generalError, setGeneralError] = useState('');

  const handleChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // РћС‡РёС‰Р°РµРј РѕС€РёР±РєСѓ РїРѕР»СЏ РїСЂРё РёР·РјРµРЅРµРЅРёРё
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
    if (generalError) {
      setGeneralError('');
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    const usernameValidation = validators.username(formData.username);
    if (!usernameValidation.isValid) {
      newErrors.username = usernameValidation.error!;
    }
    
    const emailValidation = validators.email(formData.email);
    if (!emailValidation.isValid) {
      newErrors.email = emailValidation.error!;
    }
    
    const passwordValidation = validators.password(formData.password);
    if (!passwordValidation.isValid) {
      newErrors.password = passwordValidation.error!;
    }
    
    const passwordConfirmValidation = validators.passwordConfirm(
      formData.password,
      formData.passwordConfirm
    );
    if (!passwordConfirmValidation.isValid) {
      newErrors.passwordConfirm = passwordConfirmValidation.error!;
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsLoading(true);
    setGeneralError('');
    
    try {
      const response = await authService.register({
        username: formData.username,
        email: formData.email,
        password: formData.password,
        password_confirm: formData.passwordConfirm,
      });
      
      if (response.requires_verification) {
        if (onSuccess) {
          onSuccess(response.user_id, response.email);
        } else {
          navigate(`${ROUTES.VERIFY_EMAIL}?user_id=${response.user_id}&email=${encodeURIComponent(response.email)}`);
        }
      } else {
        // Р•СЃР»Рё РІРµСЂРёС„РёРєР°С†РёСЏ РЅРµ С‚СЂРµР±СѓРµС‚СЃСЏ, РїРµСЂРµС…РѕРґРёРј РЅР° СЃС‚СЂР°РЅРёС†Сѓ РІС…РѕРґР°
        navigate(ROUTES.LOGIN);
      }
    } catch (error) {
      setGeneralError(handleApiError(error));
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form className="auth-form" onSubmit={handleSubmit}>
      <h1 className="auth-form__title">Р РµРіРёСЃС‚СЂР°С†РёСЏ</h1>
      
      {generalError && (
        <div className="auth-form__error">
          {generalError}
        </div>
      )}
      
      <div className="auth-form__field">
        <input
          type="text"
          placeholder="РРјСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ"
          value={formData.username}
          onChange={(e) => handleChange('username', e.target.value)}
          className={`auth-form__input ${errors.username ? 'auth-form__input--error' : ''}`}
          disabled={isLoading}
          autoFocus
        />
        {errors.username && (
          <span className="auth-form__field-error">{errors.username}</span>
        )}
      </div>
      
      <div className="auth-form__field">
        <input
          type="email"
          placeholder="Email"
          value={formData.email}
          onChange={(e) => handleChange('email', e.target.value)}
          className={`auth-form__input ${errors.email ? 'auth-form__input--error' : ''}`}
          disabled={isLoading}
        />
        {errors.email && (
          <span className="auth-form__field-error">{errors.email}</span>
        )}
      </div>
      
      <div className="auth-form__field">
        <input
          type="password"
          placeholder="РџР°СЂРѕР»СЊ"
          value={formData.password}
          onChange={(e) => handleChange('password', e.target.value)}
          className={`auth-form__input ${errors.password ? 'auth-form__input--error' : ''}`}
          disabled={isLoading}
        />
        {formData.password && <PasswordStrength password={formData.password} />}
        {errors.password && (
          <span className="auth-form__field-error">{errors.password}</span>
        )}
      </div>
      
      <div className="auth-form__field">
        <input
          type="password"
          placeholder="РџРѕРІС‚РѕСЂРёС‚Рµ РїР°СЂРѕР»СЊ"
          value={formData.passwordConfirm}
          onChange={(e) => handleChange('passwordConfirm', e.target.value)}
          className={`auth-form__input ${errors.passwordConfirm ? 'auth-form__input--error' : ''}`}
          disabled={isLoading}
        />
        {errors.passwordConfirm && (
          <span className="auth-form__field-error">{errors.passwordConfirm}</span>
        )}
      </div>
      
      <button
        type="submit"
        className="auth-form__submit"
        disabled={isLoading}
      >
        {isLoading ? (
          <span className="auth-form__submit-spinner" />
        ) : (
          'Р—Р°СЂРµРіРёСЃС‚СЂРёСЂРѕРІР°С‚СЊСЃСЏ'
        )}
      </button>
      
      <div className="auth-form__footer">
        <span>РЈР¶Рµ РµСЃС‚СЊ Р°РєРєР°СѓРЅС‚?</span>
        <Link to={ROUTES.LOGIN} className="auth-form__link">
          Р’РѕР№С‚Рё
        </Link>
      </div>
    </form>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\CodeInput\CodeInput.scss ===== */

// ============= src/components/CodeInput/CodeInput.scss =============

.code-input {
  display: flex;
  gap: 12px;
  justify-content: center;
  margin: 24px 0;

  &__field {
    width: 50px;
    height: 60px;
    border: 2px solid #e0e0e0;
    border-radius: 12px;
    text-align: center;
    font-size: 24px;
    font-weight: 600;
    font-family: 'Space Grotesk', monospace;
    transition: all 0.2s ease;
    background: white;
    
    @media (max-width: 480px) {
      width: 45px;
      height: 55px;
      font-size: 20px;
    }

    &:focus {
      outline: none;
      border-color: #258DFF;
      box-shadow: 0 0 0 3px rgba(37, 141, 255, 0.1);
      transform: translateY(-2px);
    }

    &:disabled {
      background: #f5f5f5;
      cursor: not-allowed;
    }
  }

  &--error {
    .code-input__field {
      border-color: #ff4444;
      
      &:focus {
        box-shadow: 0 0 0 3px rgba(255, 68, 68, 0.1);
      }
    }
  }

  &--disabled {
    opacity: 0.6;
  }
}


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\CodeInput\CodeInput.tsx ===== */

// ============= src/components/CodeInput/CodeInput.tsx =============

import React, { useState, useRef, useEffect } from 'react';
import './CodeInput.scss';

interface CodeInputProps {
  length?: number;
  onChange: (code: string) => void;
  onComplete?: (code: string) => void;
  error?: boolean;
  disabled?: boolean;
  autoFocus?: boolean;
}

export const CodeInput: React.FC<CodeInputProps> = ({
  length = 6,
  onChange,
  onComplete,
  error = false,
  disabled = false,
  autoFocus = true,
}) => {
  const [values, setValues] = useState<string[]>(new Array(length).fill(''));
  const inputRefs = useRef<(HTMLInputElement | null)[]>([]);

  useEffect(() => {
    if (autoFocus && inputRefs.current[0]) {
      inputRefs.current[0].focus();
    }
  }, [autoFocus]);

  const handleChange = (index: number, value: string) => {
    if (disabled) return;

    // Р Р°Р·СЂРµС€Р°РµРј С‚РѕР»СЊРєРѕ С†РёС„СЂС‹
    const numericValue = value.replace(/[^0-9]/g, '');
    
    if (numericValue.length <= 1) {
      const newValues = [...values];
      newValues[index] = numericValue;
      setValues(newValues);
      
      const code = newValues.join('');
      onChange(code);
      
      // РџРµСЂРµС…РѕРґ Рє СЃР»РµРґСѓСЋС‰РµРјСѓ РїРѕР»СЋ
      if (numericValue && index < length - 1) {
        inputRefs.current[index + 1]?.focus();
      }
      
      // Р’С‹Р·С‹РІР°РµРј onComplete РµСЃР»Рё РІСЃРµ РїРѕР»СЏ Р·Р°РїРѕР»РЅРµРЅС‹
      if (code.length === length && onComplete) {
        onComplete(code);
      }
    }
  };

  const handleKeyDown = (index: number, e: React.KeyboardEvent<HTMLInputElement>) => {
    if (disabled) return;

    if (e.key === 'Backspace' && !values[index] && index > 0) {
      inputRefs.current[index - 1]?.focus();
    }
  };

  const handlePaste = (e: React.ClipboardEvent) => {
    if (disabled) return;
    
    e.preventDefault();
    const pastedData = e.clipboardData.getData('text/plain').replace(/[^0-9]/g, '').slice(0, length);
    const newValues = [...values];
    
    for (let i = 0; i < pastedData.length; i++) {
      newValues[i] = pastedData[i];
    }
    
    setValues(newValues);
    const code = newValues.join('');
    onChange(code);
    
    // Р¤РѕРєСѓСЃ РЅР° РїРѕСЃР»РµРґРЅРµРµ Р·Р°РїРѕР»РЅРµРЅРЅРѕРµ РїРѕР»Рµ РёР»Рё СЃР»РµРґСѓСЋС‰РµРµ РїСѓСЃС‚РѕРµ
    const lastFilledIndex = Math.min(pastedData.length - 1, length - 1);
    inputRefs.current[lastFilledIndex]?.focus();
    
    if (code.length === length && onComplete) {
      onComplete(code);
    }
  };

  return (
    <div className={`code-input ${error ? 'code-input--error' : ''} ${disabled ? 'code-input--disabled' : ''}`}>
      {values.map((value, index) => (
        <input
          key={index}
          ref={(el) => (inputRefs.current[index] = el)}
          type="text"
          inputMode="numeric"
          maxLength={1}
          value={value}
          onChange={(e) => handleChange(index, e.target.value)}
          onKeyDown={(e) => handleKeyDown(index, e)}
          onPaste={handlePaste}
          disabled={disabled}
          className="code-input__field"
          autoComplete="off"
        />
      ))}
    </div>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\Layout\Layout.scss ===== */


// ============= src/components/Layout/Layout.scss =============

.layout {
  min-height: 100vh;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;

  &-background {
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    
    &::before {
      content: "";
      position: absolute;
      inset: 0;
      background: linear-gradient(180deg, rgba(37,141,255,0) 0%, rgba(225, 236, 254, 0.5) 100%);
      pointer-events: none;
    }
  }

  &-container {
    position: relative;
    z-index: 1;
    width: 100%;
    max-width: 470px;
    
    @media (max-width: 768px) {
      max-width: 100%;
    }
  }

  &-content {
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(20px);
    border-radius: 30px;
    border: 1px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    padding: 40px;
    
    @media (max-width: 768px) {
      padding: 30px 20px;
      border-radius: 20px;
    }
  }
}

.id-badge {
  position: absolute;
  top: -60px;
  left: 20px;
  display: flex;
  align-items: center;
  gap: 8px;
  z-index: 10;
  
  @media (max-width: 768px) {
    top: -50px;
    left: 15px;
  }

  .id-icon {
    width: 40px;
    height: 40px;
    background: rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid rgba(255, 255, 255, 0.3);
    
    svg {
      width: 23px;
      height: 22px;
    }
  }

  .id-text {
    font-family: 'Sora', sans-serif;
    font-size: 24px;
    font-weight: 700;
    color: white;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
}


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\Layout\Layout.tsx ===== */

// ============= src/components/Layout/Layout.tsx =============

import React from 'react';
import './Layout.scss';

interface LayoutProps {
  children: React.ReactNode;
  showLogo?: boolean;
}

export const Layout: React.FC<LayoutProps> = ({ children, showLogo = true }) => {
  return (
    <div className="layout">
      <div className="layout-background" />
      <div className="layout-container">
        {showLogo && (
          <div className="id-badge">
            <div className="id-icon">
              <svg width="23" height="22" viewBox="0 0 23 22" xmlns="http://www.w3.org/2000/svg">
                <path d="M16.4131 19.3398L12.4463 13.0098L12.082 12.4287L11.6406 12.9531L7.85742 17.4482L7.73926 17.5879V20.9697H3.66211L4.19629 16.7354L9.09277 11.2275L9.51465 10.7539L8.95605 10.4541L5.6875 8.70312L5.65234 8.68359L5.61523 8.6709L2.07422 7.44922L21.7803 1.28809L16.4131 19.3398Z" 
                      fill="#69A2FF" stroke="#69A2FF"/>
              </svg>
            </div>
            <span className="id-text">ID</span>
          </div>
        )}
        
        <div className="layout-content">
          {children}
        </div>
      </div>
    </div>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\LoadingOverlay\LoadingOverlay.scss ===== */

// ============= src/components/LoadingOverlay/LoadingOverlay.scss =============

.loading-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(4px);
  z-index: 9999;
  border-radius: inherit;

  &--fullscreen {
    position: fixed;
    border-radius: 0;
    background: rgba(0, 0, 0, 0.5);
  }

  &__content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 16px;
    padding: 32px;
    background: white;
    border-radius: 20px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
  }

  &__spinner {
    width: 48px;
    height: 48px;
    border: 4px solid rgba(37, 141, 255, 0.2);
    border-top-color: #258DFF;
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
  }

  &__message {
    margin: 0;
    font-size: 16px;
    font-weight: 500;
    color: #333;
    font-family: 'Open Sans', sans-serif;
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\LoadingOverlay\LoadingOverlay.tsx ===== */

// ============= src/components/LoadingOverlay/LoadingOverlay.tsx =============

import React from 'react';
import './LoadingOverlay.scss';

interface LoadingOverlayProps {
  message?: string;
  fullScreen?: boolean;
}

export const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ 
  message = 'Р—Р°РіСЂСѓР·РєР°...', 
  fullScreen = true 
}) => {
  return (
    <div className={`loading-overlay ${fullScreen ? 'loading-overlay--fullscreen' : ''}`}>
      <div className="loading-overlay__content">
        <div className="loading-overlay__spinner" />
        {message && <p className="loading-overlay__message">{message}</p>}
      </div>
    </div>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\PasswordStrength\PasswordStrength.scss ===== */

// ============= src/components/PasswordStrength/PasswordStrength.scss =============

.password-strength {
  margin-top: 8px;
  margin-bottom: 16px;

  &__bars {
    height: 4px;
    background: #e0e0e0;
    border-radius: 2px;
    overflow: hidden;
    margin-bottom: 4px;
  }

  &__bar {
    height: 100%;
    border-radius: 2px;
    transition: all 0.3s ease;
  }

  &__label {
    font-size: 12px;
    font-weight: 500;
    font-family: 'Open Sans', sans-serif;
  }
}


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\components\PasswordStrength\PasswordStrength.tsx ===== */

// ============= src/components/PasswordStrength/PasswordStrength.tsx =============

import React, { useMemo } from 'react';
import { getPasswordStrength } from '../../utils/validators';
import './PasswordStrength.scss';

interface PasswordStrengthProps {
  password: string;
  showLabel?: boolean;
}

export const PasswordStrength: React.FC<PasswordStrengthProps> = ({ 
  password, 
  showLabel = true 
}) => {
  const strength = useMemo(() => getPasswordStrength(password), [password]);

  if (!password) return null;

  return (
    <div className="password-strength">
      <div className="password-strength__bars">
        <div 
          className="password-strength__bar"
          style={{
            width: `${strength.score * 100}%`,
            backgroundColor: strength.color
          }}
        />
      </div>
      {showLabel && (
        <span 
          className="password-strength__label"
          style={{ color: strength.color }}
        >
          {strength.label}
        </span>
      )}
    </div>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\hooks\useAuth.tsx ===== */

// ============= src/hooks/useAuth.tsx =============

import React, { createContext, useContext, useState, useEffect, type ReactNode } from 'react';
import { authService } from '../services/auth.service';
import { storageService } from '../services/storage.service';
import { type User } from '../types/auth.types';
import { TOKEN_STORAGE_KEY, REFRESH_TOKEN_STORAGE_KEY } from '../utils/constants'


interface AuthContextType {
  user: User | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (username: string, email: string, password: string, passwordConfirm: string) => Promise<{ userId: string; email: string }>;
  logout: () => Promise<void>;
  checkAuth: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

const checkAuth = async () => {
  try {
    const token = localStorage.getItem(TOKEN_STORAGE_KEY)
    if (!token) { setIsLoading(false); return }
    const userData = await authService.getCurrentUser()
    setUser(userData)
  } catch (error) {
    console.error('Auth check failed:', error)
    localStorage.removeItem(TOKEN_STORAGE_KEY)
    localStorage.removeItem(REFRESH_TOKEN_STORAGE_KEY)
  } finally {
    setIsLoading(false)
  }
}

  useEffect(() => {
    checkAuth();
  }, []);

  const login = async (email: string, password: string) => {
    const response = await authService.login({ email, password });
    setUser(response.user);
  };

  const register = async (username: string, email: string, password: string, passwordConfirm: string) => {
    const response = await authService.register({
      username,
      email,
      password,
      password_confirm: passwordConfirm,
    });
    return { userId: response.user_id, email: response.email };
  };

  const logout = async () => {
    await authService.logout();
    setUser(null);
    storageService.clear();
  };

  const value: AuthContextType = {
    user,
    isLoading,
    isAuthenticated: !!user,
    login,
    register,
    logout,
    checkAuth,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\hooks\useForm.tsx ===== */

// ============= src/hooks/useForm.tsx =============

import { useState, useCallback, ChangeEvent, FormEvent } from 'react';

interface UseFormOptions<T> {
  initialValues: T;
  validate?: (values: T) => Record<string, string>;
  onSubmit: (values: T) => void | Promise<void>;
}

export function useForm<T extends Record<string, any>>({
  initialValues,
  validate,
  onSubmit,
}: UseFormOptions<T>) {
  const [values, setValues] = useState<T>(initialValues);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [touched, setTouched] = useState<Record<string, boolean>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleChange = useCallback((
    e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setValues(prev => ({ ...prev, [name]: value }));
    
    // РћС‡РёС‰Р°РµРј РѕС€РёР±РєСѓ РїСЂРё РёР·РјРµРЅРµРЅРёРё
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  }, [errors]);

  const handleBlur = useCallback((
    e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ) => {
    const { name } = e.target;
    setTouched(prev => ({ ...prev, [name]: true }));
    
    // Р’Р°Р»РёРґРёСЂСѓРµРј РїРѕР»Рµ РїСЂРё РїРѕС‚РµСЂРµ С„РѕРєСѓСЃР°
    if (validate) {
      const validationErrors = validate(values);
      if (validationErrors[name]) {
        setErrors(prev => ({ ...prev, [name]: validationErrors[name] }));
      }
    }
  }, [validate, values]);

  const handleSubmit = useCallback(async (e: FormEvent) => {
    e.preventDefault();
    
    // Р’Р°Р»РёРґР°С†РёСЏ РІСЃРµС… РїРѕР»РµР№
    if (validate) {
      const validationErrors = validate(values);
      const hasErrors = Object.keys(validationErrors).length > 0;
      
      if (hasErrors) {
        setErrors(validationErrors);
        // РџРѕРјРµС‡Р°РµРј РІСЃРµ РїРѕР»СЏ РєР°Рє touched
        const allTouched = Object.keys(values).reduce(
          (acc, key) => ({ ...acc, [key]: true }),
          {}
        );
        setTouched(allTouched);
        return;
      }
    }
    
    setIsSubmitting(true);
    try {
      await onSubmit(values);
    } finally {
      setIsSubmitting(false);
    }
  }, [validate, values, onSubmit]);

  const reset = useCallback(() => {
    setValues(initialValues);
    setErrors({});
    setTouched({});
    setIsSubmitting(false);
  }, [initialValues]);

  const setFieldValue = useCallback((name: string, value: any) => {
    setValues(prev => ({ ...prev, [name]: value }));
  }, []);

  const setFieldError = useCallback((name: string, error: string) => {
    setErrors(prev => ({ ...prev, [name]: error }));
  }, []);

  return {
    values,
    errors,
    touched,
    isSubmitting,
    handleChange,
    handleBlur,
    handleSubmit,
    reset,
    setFieldValue,
    setFieldError,
  };
}


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\hooks\useOAuth.tsx ===== */

// ============= src/hooks/useOAuth.tsx =============

import { useState, useCallback } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { oauthService } from '../services/oauth.service';
import { storageService } from '../services/storage.service';
import type { AuthorizationRequest } from '../types/oauth.types';
import { ROUTES } from '../utils/constants';

export const useOAuth = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const initializeAuthorization = useCallback(async () => {
    // РџРѕР»СѓС‡Р°РµРј РїР°СЂР°РјРµС‚СЂС‹ РёР· URL
    const clientId = searchParams.get('client_id');
    const redirectUri = searchParams.get('redirect_uri');
    const responseType = searchParams.get('response_type') || 'code';
    const scope = searchParams.get('scope') || 'openid profile email';
    const state = searchParams.get('state') || undefined;
    const nonce = searchParams.get('nonce') || undefined;
    const prompt = searchParams.get('prompt') as any || undefined;

    if (!clientId || !redirectUri) {
      setError('РћС‚СЃСѓС‚СЃС‚РІСѓСЋС‚ РѕР±СЏР·Р°С‚РµР»СЊРЅС‹Рµ РїР°СЂР°РјРµС‚СЂС‹');
      return null;
    }

    // Р“РµРЅРµСЂРёСЂСѓРµРј PKCE
    const pkce = await oauthService.generatePKCE();
    
    // РЎРѕС…СЂР°РЅСЏРµРј РґР°РЅРЅС‹Рµ РґР»СЏ РїРѕСЃР»РµРґСѓСЋС‰РµРіРѕ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёСЏ
    const authRequest: AuthorizationRequest = {
      client_id: clientId,
      redirect_uri: redirectUri,
      response_type: responseType as 'code' | 'token',
      scope,
      state,
      code_challenge: pkce.challenge,
      code_challenge_method: 'S256',
      nonce,
      prompt,
    };

    // РЎРѕС…СЂР°РЅСЏРµРј РІ storage
    if (state) {
      storageService.saveOAuthState(state, authRequest);
      storageService.savePKCEVerifier(state, pkce.verifier);
    }

    return authRequest;
  }, [searchParams]);

  const authorizeWithConsent = useCallback(async (
    authRequest: AuthorizationRequest,
    consent: boolean
  ) => {
    setIsProcessing(true);
    setError(null);

    try {
      const response = await oauthService.authorizeWithConsent(authRequest, consent);
      
      if (response.redirect_url) {
        window.location.href = response.redirect_url;
      }
    } catch (err: any) {
      setError(err.message || 'РћС€РёР±РєР° Р°РІС‚РѕСЂРёР·Р°С†РёРё');
      setIsProcessing(false);
    }
  }, []);

  const handleCallback = useCallback(async () => {
    const code = searchParams.get('code');
    const state = searchParams.get('state');
    const error = searchParams.get('error');

    if (error) {
      navigate(`${ROUTES.ERROR}?error=${error}&description=${searchParams.get('error_description')}`);
      return;
    }

    if (!code || !state) {
      navigate(`${ROUTES.ERROR}?error=invalid_request`);
      return;
    }

    setIsProcessing(true);

    try {
      // РџРѕР»СѓС‡Р°РµРј СЃРѕС…СЂР°РЅРµРЅРЅС‹Рµ РґР°РЅРЅС‹Рµ
      const authRequest = storageService.getAndRemoveOAuthState(state);
      const verifier = storageService.getPKCEVerifier(state);

      if (!authRequest || !verifier) {
        throw new Error('Invalid state or expired session');
      }

      // РћР±РјРµРЅРёРІР°РµРј РєРѕРґ РЅР° С‚РѕРєРµРЅС‹
      await oauthService.exchangeCodeForTokens({
        grant_type: 'authorization_code',
        code,
        redirect_uri: authRequest.redirect_uri,
        code_verifier: verifier,
        client_id: authRequest.client_id,
      });

      // РџРµСЂРµРЅР°РїСЂР°РІР»СЏРµРј РЅР° РїСЂРѕС„РёР»СЊ РёР»Рё РіР»Р°РІРЅСѓСЋ
      navigate(ROUTES.PROFILE);
    } catch (err: any) {
      navigate(`${ROUTES.ERROR}?error=exchange_failed`);
    } finally {
      setIsProcessing(false);
    }
  }, [navigate, searchParams]);

  return {
    initializeAuthorization,
    authorizeWithConsent,
    handleCallback,
    isProcessing,
    error,
  };
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\main.tsx ===== */

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom'
import { AuthProvider } from './hooks/useAuth'
import { LoginPage } from './pages/LoginPage'
import { RegisterPage } from './pages/RegisterPage'
import { ProfilePage } from './pages/ProfilePage'
import { AuthorizePage } from './pages/AuthorizePage'
import { ErrorPage } from './pages/ErrorPage'
import { ForgotPasswordPage } from './pages/ForgotPasswordPage'
import { ResetPasswordPage } from './pages/ResetPasswordPage'
import { VerifyEmailPage } from './pages/VerifyEmailPage'
import OAuthCallbackPage from './pages/OAuthCallbackPage'
import './styles/global.scss'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <AuthProvider>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Navigate to="/login" />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/register" element={<RegisterPage />} />
          <Route path="/profile" element={<ProfilePage />} />
          <Route path="/oauth/authorize" element={<AuthorizePage />} />
          <Route path="/error" element={<ErrorPage />} />
          <Route path="/forgot-password" element={<ForgotPasswordPage />} />
          <Route path="/reset-password" element={<ResetPasswordPage />} />
          <Route path="/verify-email" element={<VerifyEmailPage />} />
          <Route path="/oauth/callback" element={<OAuthCallbackPage />} />
        </Routes>
      </BrowserRouter>
    </AuthProvider>
  </StrictMode>
)



/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\pages\AuthorizePage.tsx ===== */

// ============= src/pages/AuthorizePage.tsx =============

import React, { useState, useEffect } from 'react';
import { Navigate } from 'react-router-dom';
import { Layout } from '../components/Layout/Layout';
import { LoadingOverlay } from '../components/LoadingOverlay/LoadingOverlay';
import { useAuth } from '../hooks/useAuth';
import { useOAuth } from '../hooks/useOAuth';
import { oauthService } from '../services/oauth.service';
import { ROUTES } from '../utils/constants';
import '../styles/pages.scss';

export const AuthorizePage: React.FC = () => {
  const { isAuthenticated, isLoading: authLoading } = useAuth();
  const { initializeAuthorization, authorizeWithConsent, isProcessing, error } = useOAuth();
  
  const [authRequest, setAuthRequest] = useState<any>(null);
  const [clientInfo, setClientInfo] = useState<any>(null);
  const [isLoadingClient, setIsLoadingClient] = useState(true);

  useEffect(() => {
    const init = async () => {
      const request = await initializeAuthorization();
      if (request) {
        setAuthRequest(request);
        
        // Р—Р°РіСЂСѓР¶Р°РµРј РёРЅС„РѕСЂРјР°С†РёСЋ Рѕ РєР»РёРµРЅС‚Рµ
        try {
          const client = await oauthService.getClientInfo(request.client_id);
          setClientInfo(client);
        } catch (err) {
          console.error('Failed to load client info:', err);
        }
      }
      setIsLoadingClient(false);
    };
    
    init();
  }, [initializeAuthorization]);

  if (authLoading || isLoadingClient) {
    return <LoadingOverlay message="Р—Р°РіСЂСѓР·РєР°..." />;
  }

  if (!isAuthenticated) {
    const currentUrl = window.location.href;
    return <Navigate to={`${ROUTES.LOGIN}?redirect_uri=${encodeURIComponent(currentUrl)}`} />;
  }

  if (error || !authRequest) {
    return (
      <Layout>
        <div className="authorize-page">
          <div className="authorize-page__error">
            <h2>РћС€РёР±РєР° Р°РІС‚РѕСЂРёР·Р°С†РёРё</h2>
            <p>{error || 'РќРµРІРµСЂРЅС‹Рµ РїР°СЂР°РјРµС‚СЂС‹ Р·Р°РїСЂРѕСЃР°'}</p>
          </div>
        </div>
      </Layout>
    );
  }

  const handleApprove = () => {
    authorizeWithConsent(authRequest, true);
  };

  const handleDeny = () => {
    authorizeWithConsent(authRequest, false);
  };

  return (
    <Layout>
      <div className="authorize-page">
        <div className="authorize-page__card">
          {clientInfo?.logo_uri && (
            <img 
              src={clientInfo.logo_uri} 
              alt={clientInfo.client_name}
              className="authorize-page__logo"
            />
          )}
          
          <h2 className="authorize-page__title">
            {clientInfo?.client_name || authRequest.client_id} Р·Р°РїСЂР°С€РёРІР°РµС‚ РґРѕСЃС‚СѓРї
          </h2>
          
          <div className="authorize-page__scopes">
            <p>РџСЂРёР»РѕР¶РµРЅРёРµ Р·Р°РїСЂР°С€РёРІР°РµС‚ СЃР»РµРґСѓСЋС‰РёРµ СЂР°Р·СЂРµС€РµРЅРёСЏ:</p>
            <ul>
              {authRequest.scope.split(' ').map((scope: string) => (
                <li key={scope}>{getScopeDescription(scope)}</li>
              ))}
            </ul>
          </div>
          
          <div className="authorize-page__actions">
            <button
              className="authorize-page__deny"
              onClick={handleDeny}
              disabled={isProcessing}
            >
              РћС‚РєР»РѕРЅРёС‚СЊ
            </button>
            <button
              className="authorize-page__approve"
              onClick={handleApprove}
              disabled={isProcessing}
            >
              Р Р°Р·СЂРµС€РёС‚СЊ
            </button>
          </div>
        </div>
        
        {isProcessing && <LoadingOverlay message="РћР±СЂР°Р±РѕС‚РєР°..." />}
      </div>
    </Layout>
  );
};

function getScopeDescription(scope: string): string {
  const descriptions: Record<string, string> = {
    openid: 'Р‘Р°Р·РѕРІР°СЏ РёРЅС„РѕСЂРјР°С†РёСЏ РїСЂРѕС„РёР»СЏ',
    profile: 'РРјСЏ Рё С„РѕС‚Рѕ РїСЂРѕС„РёР»СЏ',
    email: 'РђРґСЂРµСЃ СЌР»РµРєС‚СЂРѕРЅРЅРѕР№ РїРѕС‡С‚С‹',
    offline_access: 'Р”РѕСЃС‚СѓРї Рє РґР°РЅРЅС‹Рј РІ Р°РІС‚РѕРЅРѕРјРЅРѕРј СЂРµР¶РёРјРµ',
  };
  return descriptions[scope] || scope;
}



/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\pages\ErrorPage.tsx ===== */

// ============= src/pages/ErrorPage.tsx =============

import React from 'react';
import { Link, useSearchParams } from 'react-router-dom';
import { Layout } from '../components/Layout/Layout';
import { ROUTES } from '../utils/constants';
import '../styles/pages.scss';

export const ErrorPage: React.FC = () => {
  const [searchParams] = useSearchParams();
  
  const error = searchParams.get('error');
  const description = searchParams.get('description');

  const getErrorMessage = (): { title: string; message: string } => {
    switch (error) {
      case 'invalid_request':
        return {
          title: 'РќРµРІРµСЂРЅС‹Р№ Р·Р°РїСЂРѕСЃ',
          message: description || 'Р—Р°РїСЂРѕСЃ СЃРѕРґРµСЂР¶РёС‚ РЅРµРґРѕРїСѓСЃС‚РёРјС‹Рµ РїР°СЂР°РјРµС‚СЂС‹',
        };
      case 'unauthorized_client':
        return {
          title: 'РќРµР°РІС‚РѕСЂРёР·РѕРІР°РЅРЅС‹Р№ РєР»РёРµРЅС‚',
          message: description || 'РљР»РёРµРЅС‚ РЅРµ Р°РІС‚РѕСЂРёР·РѕРІР°РЅ РґР»СЏ РІС‹РїРѕР»РЅРµРЅРёСЏ СЌС‚РѕРіРѕ Р·Р°РїСЂРѕСЃР°',
        };
      case 'access_denied':
        return {
          title: 'Р”РѕСЃС‚СѓРї Р·Р°РїСЂРµС‰РµРЅ',
          message: description || 'Р’С‹ РѕС‚РєР»РѕРЅРёР»Рё Р·Р°РїСЂРѕСЃ РЅР° Р°РІС‚РѕСЂРёР·Р°С†РёСЋ',
        };
      case 'server_error':
        return {
          title: 'РћС€РёР±РєР° СЃРµСЂРІРµСЂР°',
          message: description || 'РџСЂРѕРёР·РѕС€Р»Р° РІРЅСѓС‚СЂРµРЅРЅСЏСЏ РѕС€РёР±РєР° СЃРµСЂРІРµСЂР°',
        };
      default:
        return {
          title: 'РћС€РёР±РєР°',
          message: description || 'РџСЂРѕРёР·РѕС€Р»Р° РЅРµРёР·РІРµСЃС‚РЅР°СЏ РѕС€РёР±РєР°',
        };
    }
  };

  const { title, message } = getErrorMessage();

  return (
    <Layout>
      <div className="error-page">
        <div className="error-page__content">
          <h1 className="error-page__title">{title}</h1>
          <p className="error-page__message">{message}</p>
          <Link to={ROUTES.HOME} className="error-page__link">
            Р’РµСЂРЅСѓС‚СЊСЃСЏ РЅР° РіР»Р°РІРЅСѓСЋ
          </Link>
        </div>
      </div>
    </Layout>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\pages\ForgotPasswordPage.tsx ===== */

// ============= src/pages/ForgotPasswordPage.tsx =============

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { Layout } from '../components/Layout/Layout';
import { authService } from '../services/auth.service';
import { validators } from '../utils/validators';
import { handleApiError } from '../utils/errors';
import { ROUTES } from '../utils/constants';
import '../styles/pages.scss';

export const ForgotPasswordPage: React.FC = () => {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const validation = validators.email(email);
    if (!validation.isValid) {
      setError(validation.error!);
      return;
    }
    
    setError('');
    setIsLoading(true);
    
    try {
      await authService.forgotPassword({ email });
      setIsSuccess(true);
    } catch (err) {
      setError(handleApiError(err));
    } finally {
      setIsLoading(false);
    }
  };

  if (isSuccess) {
    return (
      <Layout>
        <div className="forgot-page">
          <div className="forgot-page__success">
            <h2>РџСЂРѕРІРµСЂСЊС‚Рµ РїРѕС‡С‚Сѓ</h2>
            <p>РњС‹ РѕС‚РїСЂР°РІРёР»Рё РёРЅСЃС‚СЂСѓРєС†РёРё РїРѕ РІРѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёСЋ РїР°СЂРѕР»СЏ РЅР° {email}</p>
            <Link to={ROUTES.LOGIN} className="forgot-page__link">
              Р’РµСЂРЅСѓС‚СЊСЃСЏ Рє РІС…РѕРґСѓ
            </Link>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout>
      <div className="forgot-page">
        <h1 className="forgot-page__title">Р’РѕСЃСЃС‚Р°РЅРѕРІР»РµРЅРёРµ РїР°СЂРѕР»СЏ</h1>
        <p className="forgot-page__description">
          Р’РІРµРґРёС‚Рµ email, СѓРєР°Р·Р°РЅРЅС‹Р№ РїСЂРё СЂРµРіРёСЃС‚СЂР°С†РёРё
        </p>
        
        <form className="forgot-page__form" onSubmit={handleSubmit}>
          <input
            type="email"
            className={`forgot-page__input ${error ? 'forgot-page__input--error' : ''}`}
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            disabled={isLoading}
            autoFocus
          />
          
          {error && (
            <div className="forgot-page__error">
              {error}
            </div>
          )}
          
          <button
            type="submit"
            className="forgot-page__submit"
            disabled={isLoading}
          >
            {isLoading ? 'РћС‚РїСЂР°РІРєР°...' : 'РћС‚РїСЂР°РІРёС‚СЊ'}
          </button>
        </form>
        
        <Link to={ROUTES.LOGIN} className="forgot-page__link">
          Р’РµСЂРЅСѓС‚СЊСЃСЏ Рє РІС…РѕРґСѓ
        </Link>
      </div>
    </Layout>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\pages\LoginPage.tsx ===== */

// ============= src/pages/LoginPage.tsx =============

import React, { useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Layout } from '../components/Layout/Layout';
import { LoginForm } from '../components/AuthForm/LoginForm';
import { useAuth } from '../hooks/useAuth';
import { ROUTES } from '../utils/constants';

export const LoginPage: React.FC = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { isAuthenticated } = useAuth();
  
  const redirectUrl = searchParams.get('redirect_uri') || ROUTES.PROFILE;

  useEffect(() => {
    if (isAuthenticated) {
      navigate(redirectUrl);
    }
  }, [isAuthenticated, navigate, redirectUrl]);

  const handleSuccess = () => {
    navigate(redirectUrl);
  };

  return (
    <Layout>
      <LoginForm onSuccess={handleSuccess} redirectUrl={redirectUrl} />
    </Layout>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\pages\OAuthCallbackPage.tsx ===== */

// src/pages/OAuthCallbackPage.tsx
import { useEffect } from 'react'
import { useOAuth } from '../hooks/useOAuth'
import { LoadingOverlay } from '../components/LoadingOverlay/LoadingOverlay'

export default function OAuthCallbackPage() {
  const { handleCallback } = useOAuth()
  useEffect(() => { void handleCallback() }, [handleCallback])
  return <LoadingOverlay message="РћР±СЂР°Р±РѕС‚РєР°..." />
}



/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\pages\ProfilePage.tsx ===== */

// ============= src/pages/ProfilePage.tsx =============

import React from 'react';
import { Navigate } from 'react-router-dom';
import { Layout } from '../components/Layout/Layout';
import { LoadingOverlay } from '../components/LoadingOverlay/LoadingOverlay';
import { useAuth } from '../hooks/useAuth';
import { ROUTES } from '../utils/constants';
import '../styles/pages.scss';

export const ProfilePage: React.FC = () => {
  const { user, isLoading, isAuthenticated, logout } = useAuth();

  if (isLoading) {
    return <LoadingOverlay message="Р—Р°РіСЂСѓР·РєР° РїСЂРѕС„РёР»СЏ..." />;
  }

  if (!isAuthenticated) {
    return <Navigate to={ROUTES.LOGIN} />;
  }

  const handleLogout = async () => {
    await logout();
  };

  return (
    <Layout>
      <div className="profile-page">
        <h1 className="profile-page__title">РџСЂРѕС„РёР»СЊ</h1>
        
        <div className="profile-page__card">
          <div className="profile-page__info">
            <div className="profile-page__field">
              <span className="profile-page__label">РРјСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ:</span>
              <span className="profile-page__value">{user?.username}</span>
            </div>
            
            <div className="profile-page__field">
              <span className="profile-page__label">Email:</span>
              <span className="profile-page__value">
                {user?.email}
                {user?.email_verified && (
                  <span className="profile-page__verified">вњ“</span>
                )}
              </span>
            </div>
            
            <div className="profile-page__field">
              <span className="profile-page__label">ID:</span>
              <span className="profile-page__value">{user?.id}</span>
            </div>
          </div>
          
          <button
            className="profile-page__logout"
            onClick={handleLogout}
          >
            Р’С‹Р№С‚Рё
          </button>
        </div>
      </div>
    </Layout>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\pages\RegisterPage.tsx ===== */

// ============= src/pages/RegisterPage.tsx =============

import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Layout } from '../components/Layout/Layout';
import { RegisterForm } from '../components/AuthForm/RegisterForm';
import { useAuth } from '../hooks/useAuth';
import { ROUTES } from '../utils/constants';

export const RegisterPage: React.FC = () => {
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();

  useEffect(() => {
    if (isAuthenticated) {
      navigate(ROUTES.PROFILE);
    }
  }, [isAuthenticated, navigate]);

  const handleSuccess = (userId: string, email: string) => {
    navigate(`${ROUTES.VERIFY_EMAIL}?user_id=${userId}&email=${encodeURIComponent(email)}`);
  };

  return (
    <Layout>
      <RegisterForm onSuccess={handleSuccess} />
    </Layout>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\pages\ResetPasswordPage.tsx ===== */

// ============= src/pages/ResetPasswordPage.tsx =============

import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Layout } from '../components/Layout/Layout';
import { PasswordStrength } from '../components/PasswordStrength/PasswordStrength';
import { authService } from '../services/auth.service';
import { validators } from '../utils/validators';
import { handleApiError } from '../utils/errors';
import { ROUTES } from '../utils/constants';
import '../styles/pages.scss';

export const ResetPasswordPage: React.FC = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  
  const userId = searchParams.get('user_id');
  const code = searchParams.get('code');
  
  const [password, setPassword] = useState('');
  const [passwordConfirm, setPasswordConfirm] = useState('');
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (!userId || !code) {
      navigate(ROUTES.FORGOT_PASSWORD);
    }
  }, [userId, code, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const newErrors: Record<string, string> = {};
    
    const passwordValidation = validators.password(password);
    if (!passwordValidation.isValid) {
      newErrors.password = passwordValidation.error!;
    }
    
    const confirmValidation = validators.passwordConfirm(password, passwordConfirm);
    if (!confirmValidation.isValid) {
      newErrors.passwordConfirm = confirmValidation.error!;
    }
    
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }
    
    if (!userId || !code) return;
    
    setIsLoading(true);
    setErrors({});
    
    try {
      await authService.resetPassword({
        user_id: userId,
        code,
        new_password: password,
        new_password_confirm: passwordConfirm,
      });
      navigate(ROUTES.LOGIN);
    } catch (err) {
      setErrors({ general: handleApiError(err) });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Layout>
      <div className="reset-page">
        <h1 className="reset-page__title">РќРѕРІС‹Р№ РїР°СЂРѕР»СЊ</h1>
        
        <form className="reset-page__form" onSubmit={handleSubmit}>
          <div className="reset-page__field">
            <input
              type="password"
              className={`reset-page__input ${errors.password ? 'reset-page__input--error' : ''}`}
              placeholder="РќРѕРІС‹Р№ РїР°СЂРѕР»СЊ"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              disabled={isLoading}
              autoFocus
            />
            {password && <PasswordStrength password={password} />}
            {errors.password && (
              <span className="reset-page__error">{errors.password}</span>
            )}
          </div>
          
          <div className="reset-page__field">
            <input
              type="password"
              className={`reset-page__input ${errors.passwordConfirm ? 'reset-page__input--error' : ''}`}
              placeholder="РџРѕРІС‚РѕСЂРёС‚Рµ РїР°СЂРѕР»СЊ"
              value={passwordConfirm}
              onChange={(e) => setPasswordConfirm(e.target.value)}
              disabled={isLoading}
            />
            {errors.passwordConfirm && (
              <span className="reset-page__error">{errors.passwordConfirm}</span>
            )}
          </div>
          
          {errors.general && (
            <div className="reset-page__error reset-page__error--general">
              {errors.general}
            </div>
          )}
          
          <button
            type="submit"
            className="reset-page__submit"
            disabled={isLoading}
          >
            {isLoading ? 'РЎРѕС…СЂР°РЅРµРЅРёРµ...' : 'РЎРѕС…СЂР°РЅРёС‚СЊ РїР°СЂРѕР»СЊ'}
          </button>
        </form>
      </div>
    </Layout>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\pages\VerifyEmailPage.tsx ===== */

// ============= src/pages/VerifyEmailPage.tsx =============

import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { Layout } from '../components/Layout/Layout';
import { CodeInput } from '../components/CodeInput/CodeInput';
import { LoadingOverlay } from '../components/LoadingOverlay/LoadingOverlay';
import { authService } from '../services/auth.service';
import { handleApiError } from '../utils/errors';
import { ROUTES, CODE_RESEND_TIMEOUT } from '../utils/constants';
import '../styles/pages.scss';

export const VerifyEmailPage: React.FC = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  
  const userId = searchParams.get('user_id');
  const email = searchParams.get('email');
  
  const [code, setCode] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isResending, setIsResending] = useState(false);
  const [resendTimer, setResendTimer] = useState(CODE_RESEND_TIMEOUT);

  useEffect(() => {
    if (!userId || !email) {
      navigate(ROUTES.REGISTER);
    }
  }, [userId, email, navigate]);

  useEffect(() => {
    const timer = setInterval(() => {
      setResendTimer((prev) => (prev > 0 ? prev - 1 : 0));
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  const handleVerify = async (verificationCode: string) => {
    if (!userId) return;
    
    setError('');
    setIsLoading(true);
    
    try {
      await authService.verifyEmail({
        user_id: userId,
        code: verificationCode,
      });
      navigate(ROUTES.PROFILE);
    } catch (err) {
      setError(handleApiError(err));
    } finally {
      setIsLoading(false);
    }
  };

  const handleResend = async () => {
    if (!userId || resendTimer > 0) return;
    
    setIsResending(true);
    setError('');
    
    try {
      await authService.resendVerificationCode(userId);
      setResendTimer(CODE_RESEND_TIMEOUT);
      setCode('');
    } catch (err) {
      setError(handleApiError(err));
    } finally {
      setIsResending(false);
    }
  };

  return (
    <Layout>
      <div className="verify-page">
        <h1 className="verify-page__title">РџРѕРґС‚РІРµСЂР¶РґРµРЅРёРµ Email</h1>
        <p className="verify-page__description">
          РњС‹ РѕС‚РїСЂР°РІРёР»Рё РєРѕРґ РїРѕРґС‚РІРµСЂР¶РґРµРЅРёСЏ РЅР° {email}
        </p>
        
        <CodeInput
          onChange={setCode}
          onComplete={handleVerify}
          error={!!error}
          disabled={isLoading}
        />
        
        {error && (
          <div className="verify-page__error">
            {error}
          </div>
        )}
        
        <div className="verify-page__resend">
          {resendTimer > 0 ? (
            <span className="verify-page__timer">
              РћС‚РїСЂР°РІРёС‚СЊ РїРѕРІС‚РѕСЂРЅРѕ С‡РµСЂРµР· {resendTimer}СЃ
            </span>
          ) : (
            <button
              className="verify-page__resend-btn"
              onClick={handleResend}
              disabled={isResending}
            >
              {isResending ? 'РћС‚РїСЂР°РІРєР°...' : 'РћС‚РїСЂР°РІРёС‚СЊ РєРѕРґ РїРѕРІС‚РѕСЂРЅРѕ'}
            </button>
          )}
        </div>
        
        {isLoading && <LoadingOverlay message="РџСЂРѕРІРµСЂРєР° РєРѕРґР°..." />}
      </div>
    </Layout>
  );
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\services\auth.service.ts ===== */

// ============= src/services/auth.service.ts =============

import { api } from '../api/client';
import { API_ENDPOINTS } from '../api/endpoints';
import type {
  LoginRequest,
  LoginResponse,
  RegisterRequest,
  RegisterResponse,
  VerifyEmailRequest,
  ForgotPasswordRequest,
  ResetPasswordRequest,
  User,
} from '../types/auth.types';
import { apiClient } from '../api/client';


class AuthService {
  async login(data: LoginRequest): Promise<LoginResponse> {
    const response = await api.post<LoginResponse>(API_ENDPOINTS.AUTH.LOGIN, data);
    if (response.data.access_token) {
      apiClient.saveTokens(response.data);
    }
    return response.data;
  }

  async register(data: RegisterRequest): Promise<RegisterResponse> {
    const response = await api.post<RegisterResponse>(API_ENDPOINTS.AUTH.REGISTER, data);
    return response.data;
  }

  async verifyEmail(data: VerifyEmailRequest): Promise<LoginResponse> {
    const response = await api.post<LoginResponse>(API_ENDPOINTS.AUTH.VERIFY_EMAIL, data);
    if (response.data.access_token) {
      apiClient.saveTokens(response.data);
    }
    return response.data;
  }

  async resendVerificationCode(userId: string): Promise<void> {
    await api.post(API_ENDPOINTS.AUTH.RESEND_CODE, { user_id: userId });
  }

  async forgotPassword(data: ForgotPasswordRequest): Promise<void> {
    await api.post(API_ENDPOINTS.AUTH.FORGOT_PASSWORD, data);
  }

  async resetPassword(data: ResetPasswordRequest): Promise<void> {
    await api.post(API_ENDPOINTS.AUTH.RESET_PASSWORD, data);
  }

  async getCurrentUser(): Promise<User> {
    const response = await api.get<User>(API_ENDPOINTS.AUTH.ME);
    return response.data;
  }

  async logout(): Promise<void> {
    try {
      await api.post(API_ENDPOINTS.SESSION.LOGOUT);
    } finally {
      apiClient.logout();
    }
  }

  async checkSession(): Promise<boolean> {
    try {
      const response = await api.get(API_ENDPOINTS.SESSION.STATUS);
      return response.data.active;
    } catch {
      return false;
    }
  }
}

export const authService = new AuthService();


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\services\oauth.service.ts ===== */

// ============= src/services/oauth.service.ts =============

import { api, apiClient } from '../api/client';
import { API_ENDPOINTS } from '../api/endpoints';
import type {
  AuthorizationRequest,
  TokenRequest,
  TokenResponse,
  UserInfo,
  OAuthClient,
} from '../types/oauth.types';

class OAuthService {
  /**
   * Р“РµРЅРµСЂР°С†РёСЏ PKCE verifier Рё challenge
   */
  async generatePKCE(): Promise<{ verifier: string; challenge: string }> {
    const verifier = this.generateRandomString(128);
    const encoder = new TextEncoder();
    const data = encoder.encode(verifier);
    const digest = await crypto.subtle.digest('SHA-256', data);
    const challenge = this.base64URLEncode(digest);
    return { verifier, challenge };
  }

  private generateRandomString(length: number): string {
    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~'
    const bytes = new Uint8Array(length)
    crypto.getRandomValues(bytes)
    return Array.from(bytes, b => charset[b % charset.length]).join('')
  }


  private base64URLEncode(buffer: ArrayBuffer): string {
    const bytes = new Uint8Array(buffer);
    let str = '';
    for (const byte of bytes) {
      str += String.fromCharCode(byte);
    }
    return btoa(str)
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');
  }

  /**
   * РџРѕСЃС‚СЂРѕРµРЅРёРµ URL РґР»СЏ Р°РІС‚РѕСЂРёР·Р°С†РёРё
   */
  buildAuthorizationUrl(params: AuthorizationRequest): string {
    const searchParams = new URLSearchParams({
      client_id: params.client_id,
      redirect_uri: params.redirect_uri,
      response_type: params.response_type,
      scope: params.scope,
    });

    if (params.state) searchParams.append('state', params.state);
    if (params.code_challenge) searchParams.append('code_challenge', params.code_challenge);
    if (params.code_challenge_method) searchParams.append('code_challenge_method', params.code_challenge_method);
    if (params.nonce) searchParams.append('nonce', params.nonce);
    if (params.prompt) searchParams.append('prompt', params.prompt);
    if (params.max_age) searchParams.append('max_age', params.max_age.toString());

    return `${API_ENDPOINTS.OAUTH.AUTHORIZE}?${searchParams.toString()}`;
  }

  /**
   * РћР±РјРµРЅ authorization code РЅР° С‚РѕРєРµРЅС‹
   */
async exchangeCodeForTokens(params: TokenRequest): Promise<TokenResponse> {
  const body = new URLSearchParams({
    grant_type: params.grant_type,
    code: params.code ?? '',
    redirect_uri: params.redirect_uri ?? '',
    code_verifier: params.code_verifier ?? '',
    client_id: params.client_id,
  })
  const { data } = await api.post<TokenResponse>(API_ENDPOINTS.OAUTH.TOKEN, body, {
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
  })
  apiClient.saveTokens(data)
  return data
}

async refreshTokens(refreshToken: string): Promise<TokenResponse> {
  const body = new URLSearchParams({
    grant_type: 'refresh_token',
    refresh_token: refreshToken,
    client_id: import.meta.env.VITE_CLIENT_ID || 'id_frontend',
  })
  const { data } = await api.post<TokenResponse>(API_ENDPOINTS.OAUTH.TOKEN, body, {
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
  })
  apiClient.saveTokens(data)
  return data
}

  /**
   * РџРѕР»СѓС‡РµРЅРёРµ РёРЅС„РѕСЂРјР°С†РёРё Рѕ РїРѕР»СЊР·РѕРІР°С‚РµР»Рµ
   */
  async getUserInfo(): Promise<UserInfo> {
    const response = await api.get<UserInfo>(API_ENDPOINTS.OAUTH.USERINFO);
    return response.data;
  }

  /**
   * РџРѕР»СѓС‡РµРЅРёРµ РёРЅС„РѕСЂРјР°С†РёРё Рѕ РєР»РёРµРЅС‚Рµ
   */
  async getClientInfo(clientId: string): Promise<OAuthClient> {
    const response = await api.get<OAuthClient>(API_ENDPOINTS.CLIENTS.GET(clientId));
    return response.data;
  }

  /**
   * РћС‚Р·С‹РІ С‚РѕРєРµРЅР°
   */
  async revokeToken(token: string, tokenType: 'access_token' | 'refresh_token' = 'access_token'): Promise<void> {
    await api.post(API_ENDPOINTS.OAUTH.REVOKE, {
      token,
      token_type_hint: tokenType,
    });
  }

  /**
   * РђРІС‚РѕСЂРёР·Р°С†РёСЏ СЃ СЃРѕРіР»Р°СЃРёРµРј РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ
   */
  async authorizeWithConsent(
    authRequest: AuthorizationRequest,
    consent: boolean
  ): Promise<{ redirect_url: string }> {
    const response = await api.post<{ redirect_url: string }>('/oauth/authorize/consent', {
      ...authRequest,
      consent,
    });
    return response.data;
  }
}

export const oauthService = new OAuthService();


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\services\storage.service.ts ===== */

// ============= src/services/storage.service.ts =============

interface StorageData {
  [key: string]: any;
}

class StorageService {
  private prefix = 'id_app_';

  /**
   * РЎРѕС…СЂР°РЅРµРЅРёРµ РґР°РЅРЅС‹С…
   */
  set<T>(key: string, value: T): void {
    try {
      const serialized = JSON.stringify(value);
      localStorage.setItem(this.prefix + key, serialized);
    } catch (error) {
      console.error('Failed to save to localStorage:', error);
    }
  }

  /**
   * РџРѕР»СѓС‡РµРЅРёРµ РґР°РЅРЅС‹С…
   */
  get<T>(key: string): T | null {
    try {
      const item = localStorage.getItem(this.prefix + key);
      if (item === null) return null;
      return JSON.parse(item) as T;
    } catch (error) {
      console.error('Failed to get from localStorage:', error);
      return null;
    }
  }

  /**
   * РЈРґР°Р»РµРЅРёРµ РґР°РЅРЅС‹С…
   */
  remove(key: string): void {
    localStorage.removeItem(this.prefix + key);
  }

  /**
   * РћС‡РёСЃС‚РєР° РІСЃРµС… РґР°РЅРЅС‹С… РїСЂРёР»РѕР¶РµРЅРёСЏ
   */
  clear(): void {
    const keys = Object.keys(localStorage);
    keys.forEach((key) => {
      if (key.startsWith(this.prefix)) {
        localStorage.removeItem(key);
      }
    });
  }

  /**
   * РЎРѕС…СЂР°РЅРµРЅРёРµ OAuth state РґР»СЏ РїСЂРѕРІРµСЂРєРё
   */
  saveOAuthState(state: string, data: any): void {
    this.set(`oauth_state_${state}`, {
      data,
      timestamp: Date.now(),
    });
  }

  /**
   * РџРѕР»СѓС‡РµРЅРёРµ Рё СѓРґР°Р»РµРЅРёРµ OAuth state
   */
  getAndRemoveOAuthState(state: string): any | null {
    const key = `oauth_state_${state}`;
    const stored = this.get<{ data: any; timestamp: number }>(key);
    
    if (!stored) return null;
    
    // РџСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ state РЅРµ СѓСЃС‚Р°СЂРµР» (5 РјРёРЅСѓС‚)
    if (Date.now() - stored.timestamp > 5 * 60 * 1000) {
      this.remove(key);
      return null;
    }
    
    this.remove(key);
    return stored.data;
  }

  /**
   * РЎРѕС…СЂР°РЅРµРЅРёРµ PKCE verifier
   */
  savePKCEVerifier(state: string, verifier: string): void {
    this.set(`pkce_${state}`, {
      verifier,
      timestamp: Date.now(),
    });
  }

  /**
   * РџРѕР»СѓС‡РµРЅРёРµ PKCE verifier
   */
  getPKCEVerifier(state: string): string | null {
    const key = `pkce_${state}`;
    const stored = this.get<{ verifier: string; timestamp: number }>(key);
    
    if (!stored) return null;
    
    // РџСЂРѕРІРµСЂСЏРµРј, С‡С‚Рѕ verifier РЅРµ СѓСЃС‚Р°СЂРµР» (10 РјРёРЅСѓС‚)
    if (Date.now() - stored.timestamp > 10 * 60 * 1000) {
      this.remove(key);
      return null;
    }
    
    this.remove(key);
    return stored.verifier;
  }
}

export const storageService = new StorageService();


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\styles\auth.scss ===== */

// styles.auth.scss


/* ========================================================================
   РЁР РР¤РўР« Р Р‘РђР—РћР’Р«Р• РџР•Р Р•РњР•РќРќР«Р•
   ======================================================================== */

$font-sora: 'Sora', sans-serif;          // Р”Р»СЏ РєРЅРѕРїРѕРє
$font-opensans: 'Open Sans', sans-serif; // Р”Р»СЏ Р·Р°РіРѕР»РѕРІРєРѕРІ, РїРѕР»РµР№, РїР»РµР№СЃС…РѕР»РґРµСЂРѕРІ
$font-spaceglotesk: 'Space Grotesk', sans-serif;

/* ========================================================================
   Р›Р•Р™РђРЈРў: Р’РќР•РЁРќРР™ РљРћРќРўР•Р™РќР•Р  Р РљРђР РўРћР§РљРђ Р¤РћР РњР«
   ======================================================================== */

// Р’РЅРµС€РЅРёР№ РєРѕРЅС‚РµР№РЅРµСЂ. Р¦РµРЅС‚СЂРёСЂСѓРµС‚ РєР°СЂС‚РѕС‡РєСѓ РїРѕ СЌРєСЂР°РЅСѓ.
// РќР° РјРѕР±РёР»СЊРЅС‹С… вЂ” РїСЂРёР¶РёРјР°РµРј Рє РІРµСЂС…Сѓ СЃ РѕС‚СЃС‚СѓРїР°РјРё.
.auth-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  position: relative;

    // С‚РІРѕР№ РѕСЃРЅРѕРІРЅРѕР№ С„РѕРЅ СѓР¶Рµ Р·Р°РґР°С‘С‚СЃСЏ РіРґРµ-С‚Рѕ РіР»РѕР±Р°Р»СЊРЅРѕ
  // РјС‹ РїРѕРІРµСЂС… РЅРµРіРѕ РєРёРґР°РµРј РґРѕРї. РіСЂР°РґРёРµРЅС‚
  &::before {
    content: "";
    position: absolute;
    inset: 0; // Р·Р°РјРµРЅСЏРµС‚ top/left/right/bottom: 0;
    background: linear-gradient(180deg, rgba(37,141,255,0) 0%, rgba(225, 236, 254, 1) 100%);
    pointer-events: none; // С‡С‚РѕР±С‹ РЅРµ РјРµС€Р°Р» РєР»РёРєР°Рј
    z-index: 0;
  }

  // С‡С‚РѕР±С‹ РІРЅСѓС‚СЂРµРЅРЅРѕСЃС‚Рё Р±С‹Р»Рё РїРѕРІРµСЂС… РіСЂР°РґРёРµРЅС‚Р°
  > * {
    position: relative;
    z-index: 1;
  }

  @media (max-width: 768px) {
    align-items: flex-start;
    padding: 40px 10px 10px;
  }
}

// РљР°СЂС‚РѕС‡РєР° С„РѕСЂРјС‹ (РµРґРёРЅР°СЏ РєРѕР»РѕРЅРєР°).
.auth-content {
  width: 100%;
  max-width: 470px;   // С„РёРєСЃ С€РёСЂРёРЅР° РєР°СЂС‚РѕС‡РєРё
  height: 650px;      // С„РёРєСЃ РІС‹СЃРѕС‚Р° РєР°СЂС‚РѕС‡РєРё
  background: rgba(255, 255, 255, 0.6);
  border-radius: 30px;
  border: 1px solid #ffffff;
  box-shadow: 0 20px 20px rgba(0,0,0,0.05);
  padding: 40px 45px 75px;
  display: flex;
  flex-direction: column;
  justify-content: center;

  @media (max-width: 768px) {
    height: auto;         // РЅР° РјРѕР±РёР»РєРµ СѓР±РёСЂР°РµРј С„РёРєСЃ РІС‹СЃРѕС‚Сѓ
    margin-top: 20px;
    border-radius: 20px;
    padding: 15px 20px 70px 20px;
  }
}


// Р’РЅСѓС‚СЂРµРЅРЅСЏСЏ РѕР±РµСЂС‚РєР° С„РѕСЂРјС‹.
.auth-form {
  flex: 1;
  display: flex;
  flex-direction: column;
}


/* ========================================================================
   РўРРџРћР“Р РђР¤РРљРђ
   ======================================================================== */

// Р—Р°РіРѕР»РѕРІРєРё auth-СЃС‚СЂР°РЅРёС†.
.auth-title {
  font-family: $font-opensans;
  font-size: 33px;
  font-weight: 700;
  color: #258DFF;
  text-align: center;
  align-self: center;

  @media (max-width: 768px) {
    margin-top: 45px;
    font-size: 30px;

    @media (max-width: 430px) {
      font-size: 25px;
    }
  }
}


/* ========================================================================
   РРќРџРЈРўР«: Р”Рћ Р’Р’РћР”Рђ / Р’Рћ Р’Р Р•РњРЇ Р’Р’РћР”Рђ / РџРћРЎР›Р• Р’Р’РћР”Рђ
   ======================================================================== */

.auth-input-wrapper {
  position: relative;
  width: 100%;
  align-self: center;
  margin-bottom: 16px;

  @media (max-width: 768px) {
    width: 90%;
  }

  /* --- 1) Р”Рћ Р’Р’РћР”Рђ (РїСѓСЃС‚РѕРµ, РЅРµ РІ С„РѕРєСѓСЃРµ) --- */
  .auth-input {
    width: 100%;
    height: 47px;
    padding: 10px 20px;
    font-family: $font-opensans;
    font-size: 18px;
    font-weight: 600;
    color: rgba(0, 0, 0, 0.5);       /* С‚РµРєСЃС‚ РґРѕ РІРІРѕРґР° Р±РѕР»РµРµ РїСЂРёРіР»СѓС€С‘РЅРЅС‹Р№ */
    background: #E9EDF1;             /* СЃРІРµС‚Р»С‹Р№ С„РѕРЅ */
    border-radius: 15px;
    outline: none;
    border: 1.5px solid transparent;  /* Р±Р°Р·РѕРІРѕ Р±РµР· СЂР°РјРєРё (РґР»СЏ РїР»Р°РІРЅРѕР№ Р°РЅРёРјР°С†РёРё) */
    transition:
      border-color 0.18s ease,
      box-shadow 0.18s ease,
      background-color 0.18s ease,
      color 0.18s ease;

    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;

    &:hover:not(:focus) {
      /* Р»С‘РіРєР°СЏ РїРѕРґСЃРєР°Р·РєР° РїСЂРё РЅР°РІРµРґРµРЅРёРё */
      border-color: rgba(0, 0, 0, 0.08);
    }
  }

  .auth-placeholder {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    font-family: $font-opensans;
    font-weight: 600;
    font-size: 17px;
    color: rgba(0, 0, 0, 0.5);
    background: #E9EDF1;
    padding: 0 8px;
    pointer-events: none;
    transition: all 0.18s ease;
  }

  /* --- 2) Р’Рћ Р’Р Р•РњРЇ Р’Р’РћР”Рђ (С„РѕРєСѓСЃ) --- */
  &.focused {
    .auth-input {
      font-family: $font-spaceglotesk;
      letter-spacing: 1.1px;
      background: #F5F7FA;                 /* С‡СѓС‚СЊ СЃРІРµС‚Р»РµРµ РїСЂРё С„РѕРєСѓСЃРµ */
      color: rgba(0, 0, 0, 0.85);          /* С‚РµРєСЃС‚ СЏСЂС‡Рµ РІРѕ РІСЂРµРјСЏ РІРІРѕРґР° */
      border-color: #258DFE;               /* Р°РєС‚РёРІРЅР°СЏ СЂР°РјРєР° */
      box-shadow: 0 0 0 3px rgba(37, 141, 255, 0.12);
    }

    .auth-placeholder {
      top: 0;
      left: 10px;
      padding: 0 4px;
      font-size: 12px;
      background: #F5F7FA;                 /* РїРѕРґ С†РІРµС‚ РёРЅРїСѓС‚Р° РІ С„РѕРєСѓСЃРµ */
      color: #258DFE;
    }
  }

  /* --- 3) РџРћРЎР›Р• Р’Р’РћР”Рђ (Р·Р°РїРѕР»РЅРµРЅРѕ, РјРѕР¶РµС‚ Р±С‹С‚СЊ Р±РµР· С„РѕРєСѓСЃР°) --- */
  &.filled {
    .auth-input {
      font-family: $font-spaceglotesk;
      background: #F9FAFC;                 /* В«Р·Р°РїРѕР»РЅРµРЅРЅС‹Р№В» С„РѕРЅ */
      color: rgba(0, 0, 0, 0.7);          /* С„РёРЅР°Р»СЊРЅС‹Р№ С†РІРµС‚ С‚РµРєСЃС‚Р° */
      border-color: #258DFE;
      letter-spacing: 1.1px;
    }

    .auth-placeholder {
      top: 0;
      left: 10px;
      font-size: 12px;
      background: #F9FAFC;                 /* РїРѕРґ С†РІРµС‚ Р·Р°РїРѕР»РЅРµРЅРЅРѕРіРѕ РёРЅРїСѓС‚Р° */
      border-radius: 10px;
      color: #258DFE;
      padding: 0 4px;
    }
  }

  /* Р”РѕРї. СЃС‚РёР»Рё РґР»СЏ РїР°СЂРѕР»РµР№ */
  .password-input {
    letter-spacing: 1.8px;
    font-size: 18px;
  }
}

/* ========================================================================
   РљРќРћРџРљР
   ======================================================================== */

// Р“Р»Р°РІРЅС‹Рµ РєРЅРѕРїРєРё РґРµР№СЃС‚РІРёР№. РЁСЂРёС„С‚ вЂ” Sora.
.auth-button {
  font-family: $font-sora;
  font-size: 19px;
  font-weight: 600;
  color: #FFFFFF;
  background: linear-gradient(to top, rgba(28, 121, 221, 1), rgba(0, 122, 255, 0.7));
  border: none;
  border-radius: 15px;
  width: 100%;
  height: 50px;
  cursor: pointer;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  align-self: center;
  margin-top: auto;

  @media (max-width: 768px) {
    width: 90%;
    height: 45px;
  }

  &:hover {
    background: linear-gradient(to top, rgba(28, 121, 221, 0.95), rgba(0, 122, 255, 0.65));
  }

  &:active {
    transform: translateY(0.5px);
    box-shadow: 0 2px 6px rgba(0, 122, 255, 0.1);
  }

  &:disabled {
    cursor: not-allowed;
    opacity: 0.7;
    transition: opacity 0.1s;
  }

  // РЎРѕСЃС‚РѕСЏРЅРёРµ Р·Р°РіСЂСѓР·РєРё Сѓ РєРЅРѕРїРѕРє.
  &.loading {
    color: transparent !important;
    position: relative;

    .button-spinner {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }
}


/* ========================================================================
   Р‘Р›РћРљР РћРЁРР‘РћРљ
   ======================================================================== */

// РљР°СЂС‚РѕС‡РєР° РѕС€РёР±РєРё РїРѕРґ С„РѕСЂРјРѕР№.
.auth-error {
  width: 100%;
  align-self: center;
  margin-top: 10px;
  margin-bottom: 14px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  background: linear-gradient(135deg, rgba(255, 94, 94, 0.7), rgba(255, 36, 36, 0.7));
  backdrop-filter: blur(10px) saturate(180%);
  -webkit-backdrop-filter: blur(20px) saturate(180%);
  border: 1px solid rgba(255, 255, 255, 0.7);
  border-radius: 10px;
  padding: 8px 14px;
  font-size: 10px;
  font-family: "Sora", sans-serif; // РѕСЃС‚Р°РІР»РµРЅРѕ РєР°Рє РІ РёСЃС…РѕРґРЅРёРєРµ
  color: #fff;
  text-align: center;
  box-shadow: 0 4px 12px rgba(255, 36, 36, 0.2);
  position: relative;
  overflow: hidden;
  animation: fadeSlideIn 0.2s ease, shake 0.3s ease 0.4s;

  @media (max-width: 768px) {
    width: 90%;
    gap: 4px;
  }

  &::before {
    content: 'вљ ';
    font-size: 18px;
    color: #fff;
  }

  // РљРЅРѕРїРєР° РІРЅСѓС‚СЂРё РѕС€РёР±РєРё (РЅР°РїСЂРёРјРµСЂ, В«РђРєС‚РёРІРёСЂРѕРІР°С‚СЊВ»).
  .activation-btn {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.4);
    border-radius: 8px;
    padding: 8px 16px;
    font-size: 13px;
    font-weight: 600;
    font-family: "Sora", sans-serif; // РѕСЃС‚Р°РІР»РµРЅРѕ РєР°Рє РІ РёСЃС…РѕРґРЅРёРєРµ
    cursor: pointer;
    transition: all 0.2s ease;
    backdrop-filter: blur(10px);

    &:hover {
      background: rgba(255, 255, 255, 0.3);
      border-color: rgba(255, 255, 255, 0.6);
      transform: translateY(-1px);
    }

    &:active {
      transform: translateY(0);
    }
  }

  // Р•СЃР»Рё РЅРµС‚ РєРЅРѕРїРєРё РІРЅСѓС‚СЂРё вЂ” Р°РІС‚Рѕ-РёСЃС‡РµР·РЅРѕРІРµРЅРёРµ.
  &:not(:has(.activation-btn)) {
    animation: fadeSlideIn 0.2s ease, shake 0.3s ease 0.4s, fadeOut 0.6s ease 4.2s forwards;
  }
}


/* ========================================================================
   РњРђРўР•Р РРђР› РРљРћРќРљР
   ======================================================================== */

.material-symbols-outlined {
  font-family: 'Material Symbols Outlined';
  font-style: normal;
  font-weight: normal;
  font-display: block;
  white-space: nowrap;
  direction: ltr;
  -webkit-font-feature-settings: 'liga';
  font-feature-settings: 'liga';
  -webkit-font-smoothing: antialiased;
}


/* ========================================================================
   РњРћР‘РР›Р¬РќР«Р• Р­Р›Р•РњР•РќРўР« (РµСЃР»Рё РёСЃРїРѕР»СЊР·СѓСЋС‚СЃСЏ РІ РјР°РєРµС‚Рµ)
   ======================================================================== */

// РљРѕРЅС‚РµР№РЅРµСЂ РјРѕР±РёР»СЊРЅРѕРіРѕ Р»РѕРіРѕС‚РёРїР° + СЂР°Р·РґРµР»РёС‚РµР»СЊРЅР°СЏ Р»РёРЅРёСЏ.
.mobile-logo-container {
  display: none;

  @media (max-width: 768px) {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 90%;
    align-self: center;
    position: relative;

    &::after {
      content: '';
      position: absolute;
      left: -13%;
      right: -13%;
      height: 3px;
      background: #EEF1F6;
      bottom: -15px;
    }
  }
}


/* ========================================================================
   РћР’Р•Р Р›Р•Р™ Р—РђР“Р РЈР—РљР Р РЎРџРРќРќР•Р Р«
   ======================================================================== */

// РћР±С‰РёР№ overlay Р·Р°РіСЂСѓР·РєРё.
.auth-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.4);
  backdrop-filter: blur(4px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  animation: fadeIn 0.2s ease-out;
}

// РљР°СЂС‚РѕС‡РєР° РІРЅСѓС‚СЂРё overlay.
.auth-overlay-content {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20px);
  border-radius: 20px;
  padding: 32px 40px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);

  @media (max-width: 768px) {
    padding: 24px 32px;
    border-radius: 16px;
    margin: 0 20px;
  }
}

// РЎРїРёРЅРЅРµСЂ РІ overlay.
.auth-overlay-spinner {
  width: 40px;
  height: 40px;
  border: 3px solid rgba(0, 122, 255, 0.2);
  border-top: 3px solid #007AFF;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

// РўРµРєСЃС‚ РІ overlay.
.auth-overlay-message {
  font-family: 'Montserrat', sans-serif;
  font-size: 16px;
  font-weight: 500;
  color: #333;
  margin: 0;
  text-align: center;

  @media (max-width: 768px) {
    font-size: 15px;
  }
}

// РРЅР»Р°Р№РЅ-СЃРїРёРЅРЅРµСЂС‹.
.inline-spinner {
  display: inline-flex;
  align-items: center;
  gap: 8px;
}

.inline-spinner-icon {
  width: 14px;
  height: 14px;
  border: 2px solid rgba(102, 102, 102, 0.3);
  border-top: 2px solid #666;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

// РўР°Р№РјРµСЂ-СЃРїРёРЅРЅРµСЂС‹.
.timer-spinner {
  display: flex;
  align-items: center;
  gap: 8px;
  justify-content: center;
  font-family: 'Montserrat', sans-serif;
  font-size: 14px;
  color: #666;
}

.timer-spinner-icon {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(102, 102, 102, 0.3);
  border-top: 2px solid #666;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}


////////
// ID - Р­РєРѕСЃРёСЃС‚РµРјР° Asynq
////////


.id-badge {
  position: absolute;
  top: 41px;
  left: 47px;

  display: flex;
  align-items: center;
  justify-content: center;
  gap: 5px;

  width: 82px;
  height: 40px;
  padding: 1px 5px 1px 7px;

  background: linear-gradient(180deg, rgba(50,50,50,0.9) 0%, rgba(0,0,0,0.9) 100%);
  border-radius: 19px;
}

.id-icon {
  width: 22px;
  height: 21px;
  display: flex;
  align-items: center;
  justify-content: center;

  svg {
    width: 100%;
    height: 100%;
  }
}

.id-text {
  font-family: 'Open Sans', sans-serif;
  font-weight: 700;
  font-size: 27px;
  line-height: 26px;
  color: #fff;
  display: flex;
  align-items: center;
}

.id-badge {
  transform: scale(0.85); // 85% РѕС‚ С‚РµРєСѓС‰РµРіРѕ СЂР°Р·РјРµСЂР°
  transform-origin: top left; // С‡С‚РѕР±С‹ СѓРјРµРЅСЊС€РµРЅРёРµ С€Р»Рѕ РѕС‚ Р»РµРІРѕРіРѕ РІРµСЂС…РЅРµРіРѕ СѓРіР»Р°
}


////////
// Р’Р«РҐРћР”
////////


.logout-btn {
  position: absolute;
  top: 41px;
  right: 47px; // РІРјРµСЃС‚Рѕ left:1342px вЂ” С‚Р°Рє Р°РґР°РїС‚РёРІРЅРµРµ
  width: 45px;
  height: 45px;

  background: #E9EDF1;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;

  cursor: pointer;
  transition: background 0.2s ease;

  &:hover {
    background: #dce0e5;
  }

  .material-symbols-outlined {
    font-size: 35px; // Р±Р»РёР·РєРѕ Рє 46px РёР· С„РёРіРјС‹, РЅРѕ Р»СѓС‡С€Рµ РїСЂРѕРїРѕСЂС†РёРѕРЅР°Р»СЊРЅРѕ
    color: #333333d2;
      font-variation-settings:
    'FILL' 0,        // 0 вЂ” РєРѕРЅС‚СѓСЂРЅР°СЏ, 1 вЂ” Р·Р°Р»РёРІРєР°
    'wght' 200,      // С‚РѕР»С‰РёРЅР° (100вЂ“700)
    'GRAD' 0,        // РЅР°РєР»РѕРЅ
    'opsz' 48;       // "РѕРїС‚РёС‡РµСЃРєРёР№ СЂР°Р·РјРµСЂ" (Р°РґР°РїС‚РёРІРЅРѕСЃС‚СЊ)
  }
}




/* ========================================================================
   РђРќРРњРђР¦РР
   ======================================================================== */

@keyframes fadeSlideIn {
  from { opacity: 0; transform: translateY(-8px); }
  to   { opacity: 1; transform: translateY(0); }
}

@keyframes shake {
  0% { transform: translateX(0); }
  20% { transform: translateX(-1px); }
  40% { transform: translateX(1px); }
  60% { transform: translateX(-1px); }
  80% { transform: translateX(1px); }
  100% { transform: translateX(0); }
}

@keyframes fadeOut {
  0%   { opacity: 1; transform: translateY(0) scale(1); filter: blur(0); }
  100% { opacity: 0; transform: translateY(-10px) scale(0.95); filter: blur(3px); }
}

@keyframes spin {
  0%   { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes fadeIn {
  0%   { opacity: 0; transform: scale(0.95); }
  100% { opacity: 1; transform: scale(1); }
}



/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\styles\global.scss ===== */

// ============= src/styles/global.scss =============

@import './variables.scss';

// Fonts
@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;500;600;700&family=Sora:wght@400;500;600;700&family=Space+Grotesk:wght@400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200');

// Reset
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 16px;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body {
  font-family: $font-primary;
  color: $text-primary;
  background: $background;
  line-height: 1.6;
  overflow-x: hidden;
}

// Links
a {
  color: $primary-color;
  text-decoration: none;
  transition: color $transition-base;

  &:hover {
    color: $primary-dark;
  }
}

// Buttons
button {
  font-family: inherit;
  cursor: pointer;
  transition: all $transition-base;
  
  &:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
}

// Inputs
input,
textarea,
select {
  font-family: inherit;
  font-size: inherit;
  
  &:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
}

// Scrollbar
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.05);
}

::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.2);
  border-radius: 4px;
  
  &:hover {
    background: rgba(0, 0, 0, 0.3);
  }
}

// Animations
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes slideUp {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes slideDown {
  from {
    transform: translateY(-20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes shake {
  0%, 100% {
    transform: translateX(0);
  }
  10%, 30%, 50%, 70%, 90% {
    transform: translateX(-2px);
  }
  20%, 40%, 60%, 80% {
    transform: translateX(2px);
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

// Utility classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 $spacing-md;
  
  @media (max-width: $tablet) {
    padding: 0 $spacing-sm;
  }
}

.text-center {
  text-align: center;
}

.text-left {
  text-align: left;
}

.text-right {
  text-align: right;
}

.mt-1 { margin-top: $spacing-xs; }
.mt-2 { margin-top: $spacing-sm; }
.mt-3 { margin-top: $spacing-md; }
.mt-4 { margin-top: $spacing-lg; }
.mt-5 { margin-top: $spacing-xl; }

.mb-1 { margin-bottom: $spacing-xs; }
.mb-2 { margin-bottom: $spacing-sm; }
.mb-3 { margin-bottom: $spacing-md; }
.mb-4 { margin-bottom: $spacing-lg; }
.mb-5 { margin-bottom: $spacing-xl; }

.p-1 { padding: $spacing-xs; }
.p-2 { padding: $spacing-sm; }
.p-3 { padding: $spacing-md; }
.p-4 { padding: $spacing-lg; }
.p-5 { padding: $spacing-xl; }


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\styles\pages.scss ===== */

@import './variables.scss';

// Verify Email Page
.verify-page {
  text-align: center;

  &__title {
    font-size: 28px;
    font-weight: 700;
    color: $primary-color;
    margin-bottom: $spacing-md;
  }

  &__description {
    font-size: 16px;
    color: $text-secondary;
    margin-bottom: $spacing-xl;
  }

  &__error {
    background: rgba($error-color, 0.1);
    border: 1px solid rgba($error-color, 0.3);
    border-radius: $radius-md;
    padding: $spacing-md;
    margin: $spacing-lg 0;
    color: $error-color;
    font-size: 14px;
  }

  &__resend {
    margin-top: $spacing-xl;
  }

  &__timer {
    color: $text-secondary;
    font-size: 14px;
  }

  &__resend-btn {
    background: none;
    border: none;
    color: $primary-color;
    font-size: 14px;
    font-weight: 500;
    text-decoration: underline;

    &:hover:not(:disabled) {
      color: $primary-dark;
    }
  }
}

// Forgot Password Page
.forgot-page {
  &__title {
    font-size: 28px;
    font-weight: 700;
    color: $primary-color;
    text-align: center;
    margin-bottom: $spacing-md;
  }

  &__description {
    text-align: center;
    color: $text-secondary;
    margin-bottom: $spacing-xl;
  }

  &__form {
    display: flex;
    flex-direction: column;
    gap: $spacing-md;
  }

  &__input {
    width: 100%;
    height: 50px;
    padding: 0 $spacing-lg;
    font-size: 16px;
    background: $background;
    border: 2px solid transparent;
    border-radius: $radius-md;
    transition: all $transition-base;

    &:focus {
      outline: none;
      background: white;
      border-color: $primary-color;
      box-shadow: 0 0 0 3px rgba($primary-color, 0.1);
    }

    &--error {
      border-color: $error-color;
    }
  }

  &__error {
    color: $error-color;
    font-size: 14px;
  }

  &__submit {
    height: 50px;
    background: linear-gradient(135deg, $primary-color, $primary-dark);
    color: white;
    border: none;
    border-radius: $radius-md;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all $transition-base;

    &:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba($primary-color, 0.3);
    }
  }

  &__link {
    display: block;
    text-align: center;
    margin-top: $spacing-lg;
    color: $primary-color;
    font-size: 14px;
  }

  &__success {
    text-align: center;

    h2 {
      color: $success-color;
      margin-bottom: $spacing-md;
    }

    p {
      color: $text-secondary;
      margin-bottom: $spacing-xl;
    }
  }
}

// Reset Password Page
.reset-page {
  &__title {
    font-size: 28px;
    font-weight: 700;
    color: $primary-color;
    text-align: center;
    margin-bottom: $spacing-xl;
  }

  &__form {
    display: flex;
    flex-direction: column;
    gap: $spacing-lg;
  }

  &__field {
    position: relative;
  }

  &__input {
    width: 100%;
    height: 50px;
    padding: 0 $spacing-lg;
    font-size: 16px;
    background: $background;
    border: 2px solid transparent;
    border-radius: $radius-md;
    transition: all $transition-base;

    &:focus {
      outline: none;
      background: white;
      border-color: $primary-color;
      box-shadow: 0 0 0 3px rgba($primary-color, 0.1);
    }

    &--error {
      border-color: $error-color;
    }
  }

  &__error {
    display: block;
    color: $error-color;
    font-size: 12px;
    margin-top: $spacing-xs;

    &--general {
      background: rgba($error-color, 0.1);
      border: 1px solid rgba($error-color, 0.3);
      border-radius: $radius-md;
      padding: $spacing-md;
      font-size: 14px;
    }
  }

  &__submit {
    height: 50px;
    background: linear-gradient(135deg, $primary-color, $primary-dark);
    color: white;
    border: none;
    border-radius: $radius-md;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all $transition-base;

    &:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba($primary-color, 0.3);
    }
  }
}

// Profile Page
.profile-page {
  &__title {
    font-size: 28px;
    font-weight: 700;
    color: $primary-color;
    text-align: center;
    margin-bottom: $spacing-xl;
  }

  &__card {
    background: white;
    border-radius: $radius-lg;
    padding: $spacing-xl;
    box-shadow: $shadow-md;
  }

  &__info {
    margin-bottom: $spacing-xl;
  }

  &__field {
    display: flex;
    justify-content: space-between;
    padding: $spacing-md 0;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);

    &:last-child {
      border-bottom: none;
    }
  }

  &__label {
    font-weight: 500;
    color: $text-secondary;
  }

  &__value {
    font-weight: 600;
    color: $text-primary;
    display: flex;
    align-items: center;
    gap: $spacing-sm;
  }

  &__verified {
    color: $success-color;
    font-size: 18px;
  }

  &__logout {
    width: 100%;
    height: 45px;
    background: linear-gradient(135deg, #ff4444, #cc0000);
    color: white;
    border: none;
    border-radius: $radius-md;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all $transition-base;

    &:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(255, 68, 68, 0.3);
    }

    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
  }
}

// Authorize Page
.authorize-page {
  &__card {
    background: white;
    border-radius: $radius-lg;
    padding: $spacing-xl;
    box-shadow: $shadow-md;
    text-align: center;
  }

  &__logo {
    width: 64px;
    height: 64px;
    object-fit: contain;
    margin-bottom: $spacing-md;
  }

  &__title {
    font-size: 22px;
    font-weight: 700;
    color: $text-primary;
    margin-bottom: $spacing-md;
  }

  &__scopes {
    text-align: left;
    margin: $spacing-md 0 $spacing-lg;

    p {
      color: $text-secondary;
      margin-bottom: $spacing-sm;
    }

    ul {
      padding-left: $spacing-lg;
    }
  }

  &__actions {
    display: flex;
    gap: $spacing-md;
    justify-content: center;
  }

  &__deny,
  &__approve {
    min-width: 140px;
    height: 44px;
    border-radius: $radius-md;
    border: none;
    font-weight: 600;
    cursor: pointer;
    transition: all $transition-base;
  }

  &__deny {
    background: #eef1f6;
    color: $text-primary;

    &:hover:not(:disabled) {
      transform: translateY(-2px);
    }
  }

  &__approve {
    background: linear-gradient(135deg, $primary-color, $primary-dark);
    color: white;

    &:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba($primary-color, 0.3);
    }
  }
}

// Error Page
.error-page {
  &__content {
    background: white;
    border-radius: $radius-lg;
    padding: $spacing-xl;
    box-shadow: $shadow-md;
    text-align: center;
  }

  &__title {
    font-size: 24px;
    font-weight: 700;
    color: $error-color;
    margin-bottom: $spacing-md;
  }

  &__message {
    color: $text-secondary;
    margin-bottom: $spacing-lg;
  }

  &__link {
    color: $primary-color;
    text-decoration: underline;

    &:hover {
      color: $primary-dark;
    }
  }
}



/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\styles\variables.scss ===== */

// ============= src/styles/variables.scss =============

// Colors
$primary-color: #258DFF;
$primary-dark: #1976d2;
$primary-light: #69A2FF;

$error-color: #ff4444;
$success-color: #00cc00;
$warning-color: #ffbb00;

$text-primary: #333333;
$text-secondary: #666666;
$text-light: rgba(0, 0, 0, 0.5);

$background: #f5f7fa;
$background-light: #ffffff;
$background-glass: rgba(255, 255, 255, 0.95);

// Typography
$font-primary: 'Open Sans', sans-serif;
$font-secondary: 'Sora', sans-serif;
$font-mono: 'Space Grotesk', monospace;

// Breakpoints
$mobile: 480px;
$tablet: 768px;
$desktop: 1024px;
$wide: 1440px;

// Spacing
$spacing-xs: 4px;
$spacing-sm: 8px;
$spacing-md: 16px;
$spacing-lg: 24px;
$spacing-xl: 32px;
$spacing-xxl: 48px;

// Border radius
$radius-sm: 8px;
$radius-md: 12px;
$radius-lg: 16px;
$radius-xl: 20px;
$radius-xxl: 30px;

// Shadows
$shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.1);
$shadow-md: 0 4px 12px rgba(0, 0, 0, 0.1);
$shadow-lg: 0 10px 40px rgba(0, 0, 0, 0.1);
$shadow-xl: 0 20px 60px rgba(0, 0, 0, 0.15);

// Transitions
$transition-fast: 0.15s ease;
$transition-base: 0.2s ease;
$transition-slow: 0.3s ease;

// Z-index
$z-dropdown: 100;
$z-modal: 1000;
$z-overlay: 9999;
$z-notification: 10000;




/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\types\api.types.ts ===== */

// ============= src/types/api.types.ts =============

export interface ApiResponse<T = any> {
  data?: T;
  error?: string;
  message?: string;
  status: number;
}

export interface PaginatedResponse<T> {
  items: T[];
  total: number;
  page: number;
  per_page: number;
  total_pages: number;
}

export interface ValidationError {
  field: string;
  message: string;
}

export interface Session {
  id: string;
  user_id: string;
  client_id?: string;
  ip_address: string;
  user_agent: string;
  created_at: string;
  last_activity: string;
  expires_at: string;
}


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\types\auth.types.ts ===== */

// ============= src/types/auth.types.ts =============

export interface User {
  id: string;
  username: string;
  email: string;
  email_verified: boolean;
  created_at: string;
  updated_at: string;
}

export interface LoginRequest { email: string; password: string; }
export interface RegisterRequest { username: string; email: string; password: string; password_confirm: string; }
export interface VerifyEmailRequest { user_id: string; code: string; }
export interface ForgotPasswordRequest { email: string; }
export interface ResetPasswordRequest {
  user_id: string;
  code: string;
  new_password: string;
  new_password_confirm: string;
}

export interface LoginResponse {
  access_token: string;
  refresh_token: string;
  token_type: string;
  expires_in: number;
  user: User;
}

export interface RegisterResponse {
  user_id: string;
  email: string;
  message: string;
  requires_verification: boolean;
}

export interface ApiError {
  error: string;
  message?: string;
  details?: Record<string, any>;
}



/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\types\oauth.types.ts ===== */

// ============= src/types/oauth.types.ts =============

export interface OAuthClient {
  client_id: string;
  client_name: string;
  client_uri?: string;
  logo_uri?: string;
  redirect_uris: string[];
  scope: string;
}

export interface AuthorizationRequest {
  client_id: string;
  redirect_uri: string;
  response_type: 'code' | 'token';
  scope: string;
  state?: string;
  code_challenge?: string;
  code_challenge_method?: 'S256' | 'plain';
  nonce?: string;
  prompt?: 'none' | 'login' | 'consent' | 'select_account';
  max_age?: number;
}

export interface AuthorizationResponse {
  code?: string;
  state?: string;
  error?: string;
  error_description?: string;
}

export interface TokenRequest {
  grant_type: 'authorization_code' | 'refresh_token' | 'password';
  code?: string;
  redirect_uri?: string;
  code_verifier?: string;
  refresh_token?: string;
  username?: string;
  password?: string;
  client_id: string;
  client_secret?: string;
  scope?: string;
}

export interface TokenResponse {
  access_token: string;
  token_type: string;
  expires_in: number;
  refresh_token?: string;
  id_token?: string;
  scope?: string;
}

export interface UserInfo {
  sub: string;
  name?: string;
  preferred_username?: string;
  email?: string;
  email_verified?: boolean;
  picture?: string;
  updated_at?: number;
}


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\utils\constants.ts ===== */

// ============= src/utils/constants.ts =============

export const APP_NAME = 'ID Service';
export const APP_VERSION = '1.0.0';

export const PASSWORD_MIN_LENGTH = 8;
export const USERNAME_MIN_LENGTH = 3;
export const USERNAME_MAX_LENGTH = 20;

export const CODE_LENGTH = 6;
export const CODE_RESEND_TIMEOUT = 60; // seconds

export const TOKEN_STORAGE_KEY = 'access_token';
export const REFRESH_TOKEN_STORAGE_KEY = 'refresh_token';
export const ID_TOKEN_STORAGE_KEY = 'id_token';

export const OAUTH_SCOPES = {
  OPENID: 'openid',
  PROFILE: 'profile',
  EMAIL: 'email',
  OFFLINE_ACCESS: 'offline_access',
};

export const ERROR_MESSAGES = {
  NETWORK_ERROR: 'РћС€РёР±РєР° СЃРµС‚Рё. РџСЂРѕРІРµСЂСЊС‚Рµ РїРѕРґРєР»СЋС‡РµРЅРёРµ Рє РёРЅС‚РµСЂРЅРµС‚Сѓ.',
  UNAUTHORIZED: 'РќРµРѕР±С…РѕРґРёРјР° Р°РІС‚РѕСЂРёР·Р°С†РёСЏ.',
  FORBIDDEN: 'Р”РѕСЃС‚СѓРї Р·Р°РїСЂРµС‰РµРЅ.',
  NOT_FOUND: 'Р РµСЃСѓСЂСЃ РЅРµ РЅР°Р№РґРµРЅ.',
  VALIDATION_ERROR: 'РџСЂРѕРІРµСЂСЊС‚Рµ РїСЂР°РІРёР»СЊРЅРѕСЃС‚СЊ РІРІРµРґРµРЅРЅС‹С… РґР°РЅРЅС‹С….',
  SERVER_ERROR: 'РћС€РёР±РєР° СЃРµСЂРІРµСЂР°. РџРѕРїСЂРѕР±СѓР№С‚Рµ РїРѕР·Р¶Рµ.',
  UNKNOWN_ERROR: 'РџСЂРѕРёР·РѕС€Р»Р° РЅРµРёР·РІРµСЃС‚РЅР°СЏ РѕС€РёР±РєР°.',
};

export const ROUTES = {
  HOME: '/',
  LOGIN: '/login',
  REGISTER: '/register',
  VERIFY_EMAIL: '/verify-email',
  FORGOT_PASSWORD: '/forgot-password',
  RESET_PASSWORD: '/reset-password',
  PROFILE: '/profile',
  AUTHORIZE: '/oauth/authorize',
  ERROR: '/error',
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\utils\errors.ts ===== */

// ============= src/utils/errors.ts =============

import { AxiosError } from 'axios';
import type { ApiError } from '../types/auth.types';
import { ERROR_MESSAGES } from './constants';

export class AppError extends Error {
  public code?: string;
  public details?: any;

  constructor(message: string, code?: string, details?: any) {
    super(message);
    this.name = 'AppError';
    this.code = code;
    this.details = details;
  }
}

export const handleApiError = (error: unknown): string => {
  if (error instanceof AxiosError) {
    const apiError = error.response?.data as ApiError;
    
    if (apiError?.message) {
      return apiError.message;
    }
    
    if (apiError?.error) {
      return apiError.error;
    }
    
    switch (error.response?.status) {
      case 400:
        return ERROR_MESSAGES.VALIDATION_ERROR;
      case 401:
        return ERROR_MESSAGES.UNAUTHORIZED;
      case 403:
        return ERROR_MESSAGES.FORBIDDEN;
      case 404:
        return ERROR_MESSAGES.NOT_FOUND;
      case 500:
      case 502:
      case 503:
        return ERROR_MESSAGES.SERVER_ERROR;
      default:
        if (!error.response) {
          return ERROR_MESSAGES.NETWORK_ERROR;
        }
        return ERROR_MESSAGES.UNKNOWN_ERROR;
    }
  }
  
  if (error instanceof Error) {
    return error.message;
  }
  
  return ERROR_MESSAGES.UNKNOWN_ERROR;
};

export const isNetworkError = (error: unknown): boolean => {
  if (error instanceof AxiosError) {
    return !error.response && error.code === 'ERR_NETWORK';
  }
  return false;
};

export const isUnauthorizedError = (error: unknown): boolean => {
  if (error instanceof AxiosError) {
    return error.response?.status === 401;
  }
  return false;
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\utils\validators.ts ===== */

// ============= src/utils/validators.ts =============

import { PASSWORD_MIN_LENGTH, USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH } from './constants';

export interface ValidationResult {
  isValid: boolean;
  error?: string;
}

export const validators = {
  email: (email: string): ValidationResult => {
    if (!email) {
      return { isValid: false, error: 'Email РѕР±СЏР·Р°С‚РµР»РµРЅ' };
    }
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return { isValid: false, error: 'РќРµРІРµСЂРЅС‹Р№ С„РѕСЂРјР°С‚ email' };
    }
    return { isValid: true };
  },

  username: (username: string): ValidationResult => {
    if (!username) {
      return { isValid: false, error: 'РРјСЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ РѕР±СЏР·Р°С‚РµР»СЊРЅРѕ' };
    }
    if (username.length < USERNAME_MIN_LENGTH) {
      return { isValid: false, error: `РњРёРЅРёРјСѓРј ${USERNAME_MIN_LENGTH} СЃРёРјРІРѕР»Р°` };
    }
    if (username.length > USERNAME_MAX_LENGTH) {
      return { isValid: false, error: `РњР°РєСЃРёРјСѓРј ${USERNAME_MAX_LENGTH} СЃРёРјРІРѕР»РѕРІ` };
    }
    const usernameRegex = /^[a-zA-Z0-9_-]+$/;
    if (!usernameRegex.test(username)) {
      return { isValid: false, error: 'РўРѕР»СЊРєРѕ Р±СѓРєРІС‹, С†РёС„СЂС‹, _ Рё -' };
    }
    return { isValid: true };
  },

  password: (password: string): ValidationResult => {
    if (!password) {
      return { isValid: false, error: 'РџР°СЂРѕР»СЊ РѕР±СЏР·Р°С‚РµР»РµРЅ' };
    }
    if (password.length < PASSWORD_MIN_LENGTH) {
      return { isValid: false, error: `РњРёРЅРёРјСѓРј ${PASSWORD_MIN_LENGTH} СЃРёРјРІРѕР»РѕРІ` };
    }
    return { isValid: true };
  },

  passwordConfirm: (password: string, confirmPassword: string): ValidationResult => {
    if (!confirmPassword) {
      return { isValid: false, error: 'РџРѕРґС‚РІРµСЂРґРёС‚Рµ РїР°СЂРѕР»СЊ' };
    }
    if (password !== confirmPassword) {
      return { isValid: false, error: 'РџР°СЂРѕР»Рё РЅРµ СЃРѕРІРїР°РґР°СЋС‚' };
    }
    return { isValid: true };
  },

  code: (code: string): ValidationResult => {
    if (!code) {
      return { isValid: false, error: 'РљРѕРґ РѕР±СЏР·Р°С‚РµР»РµРЅ' };
    }
    if (!/^\d{6}$/.test(code)) {
      return { isValid: false, error: 'РљРѕРґ РґРѕР»Р¶РµРЅ СЃРѕСЃС‚РѕСЏС‚СЊ РёР· 6 С†РёС„СЂ' };
    }
    return { isValid: true };
  },
};

export const getPasswordStrength = (password: string): {
  score: number;
  label: string;
  color: string;
} => {
  let score = 0;
  
  if (password.length >= 8) score++;
  if (password.length >= 12) score++;
  if (/[a-z]/.test(password)) score++;
  if (/[A-Z]/.test(password)) score++;
  if (/[0-9]/.test(password)) score++;
  if (/[^a-zA-Z0-9]/.test(password)) score++;
  
  const strength = [
    { min: 0, label: 'РћС‡РµРЅСЊ СЃР»Р°Р±С‹Р№', color: '#ff4444' },
    { min: 2, label: 'РЎР»Р°Р±С‹Р№', color: '#ff8800' },
    { min: 3, label: 'РЎСЂРµРґРЅРёР№', color: '#ffbb00' },
    { min: 4, label: 'РҐРѕСЂРѕС€РёР№', color: '#88dd00' },
    { min: 5, label: 'РћС‚Р»РёС‡РЅС‹Р№', color: '#00cc00' },
  ];
  
  const result = strength.reverse().find(s => score >= s.min) || strength[0];
  
  return {
    score: Math.min(score / 6, 1),
    label: result.label,
    color: result.color,
  };
};


/* ===== C:\Users\icipa\team-platform-public\id_frontend\src\vite-env.d.ts ===== */

/// <reference types="vite/client" />
declare module '*.scss';


/* ===== C:\Users\icipa\team-platform-public\id_frontend\tsconfig.app.json ===== */

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",


    

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": false
  },
  "include": ["src"]
}



/* ===== C:\Users\icipa\team-platform-public\id_frontend\tsconfig.json ===== */

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}



/* ===== C:\Users\icipa\team-platform-public\id_frontend\tsconfig.node.json ===== */

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}



/* ===== C:\Users\icipa\team-platform-public\id_frontend\vite.config.ts ===== */

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: { '@': path.resolve(__dirname, './src') },
  },
  server: {
    port: 5173,
    proxy: {
      '/api': { target: 'http://localhost:8000', changeOrigin: true },
      '/.well-known': { target: 'http://localhost:8000', changeOrigin: true },
      '/oauth': {
        target: 'http://localhost:8000',
        changeOrigin: true,
        bypass(req) {
          // SPA С‚РѕР»СЊРєРѕ РґР»СЏ Р±СЂР°СѓР·РµСЂРЅРѕРіРѕ GET РЅР° /oauth/authorize
          if (req.method === 'GET' && req.url === '/oauth/authorize') {
            return req.url
          }
        },
      },
    },
  },
})

