# docker-compose.yml

services:
  db:
    image: postgres:15
    container_name: postgres_team
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: siperup44rQVr8
      POSTGRES_DB: postgres  # Изменено на postgres для начальной БД
    command: ["postgres", "-c", "password_encryption=md5"]
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks: [app-network]

  db-creator:
    image: postgres:15
    container_name: db_creator_team
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./create-databases.sh:/create-databases.sh
    environment:
      POSTGRES_PASSWORD: siperup44rQVr8
      POSTGRES_USER: postgres
      PGPASSWORD: siperup44rQVr8
    command: bash /create-databases.sh
    restart: "no"
    networks: [app-network]

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks: [app-network]

  authservice:
    build:
      context: ./auth_service
    container_name: authservice_team
    command: sh -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./auth_service:/app
    ports:
      - "8000:8000"
    env_file:
      - ./auth_service/.env
    depends_on:
      db:
        condition: service_healthy
      db-creator:
        condition: service_completed_successfully
    networks: [app-network]

  catalogservice:
    build:
      context: ./catalog_service
    container_name: catalogservice_team
    command: sh -c "alembic upgrade head && python -m uvicorn main:app --host 0.0.0.0 --port 8001 --reload"
    volumes:
      - ./catalog_service:/catalog_service
    working_dir: /catalog_service
    ports:
      - "8001:8001"
    env_file:
      - ./catalog_service/.env
    depends_on:
      db:
        condition: service_healthy
      db-creator:
        condition: service_completed_successfully
    networks: [app-network]

  learningservice:
    build:
      context: ./learning_service
    container_name: learningservice_team
    command: sh -lc "alembic upgrade head && python -m uvicorn main:app --host 0.0.0.0 --port 8002 --reload"
    environment:
    - DATABASE_URL=postgresql://postgres:siperup44rQVr8@db:5432/team_platform_learning
    volumes:
      - ./learning_service:/learning_service
    working_dir: /learning_service
    ports:
      - "8004:8002"
    env_file:
      - ./learning_service/.env
    depends_on:
      db:
        condition: service_healthy
      db-creator:
        condition: service_completed_successfully
    networks: [app-network]

  pointsservice:
    build:
      context: ./points_service
    container_name: pointsservice_team
    command: sh -lc "./init_db.sh; alembic upgrade head; python -m uvicorn main:app --host 0.0.0.0 --port 8003 --reload"
    volumes:
      - ./points_service:/points_service
    working_dir: /points_service
    ports:
      - "8003:8003"
    env_file:
      - ./points_service/.env
    depends_on:
      db:
        condition: service_healthy
      db-creator:
        condition: service_completed_successfully
    networks: [app-network]

  adminservice:
    build:
      context: ./admin_service
    container_name: adminservice_team
    working_dir: /admin_service
    command: sh -c "alembic upgrade head && python -m uvicorn main:app --host 0.0.0.0 --port 8002 --reload"
    volumes:
      - ./admin_service:/admin_service
    ports:
      - "8010:8002"
    env_file:
      - ./admin_service/.env
    depends_on:
      db:
        condition: service_healthy
      db-creator:
        condition: service_completed_successfully
      redis:
        condition: service_started
      authservice:
        condition: service_started
      catalogservice:
        condition: service_started
      learningservice:
        condition: service_started
    networks: [app-network]

  celeryworker:
    build:
      context: ./auth_service
    container_name: celeryworker_team
    command: celery -A app worker -l info
    volumes:
      - ./auth_service:/app
    env_file:
      - ./auth_service/.env
    depends_on:
      - authservice
      - redis
    networks: [app-network]

  adminfrontend:
    build:
      context: ./admin-frontend
      args:
        - REACT_APP_API_URL=http://adminservice:8002
    container_name: admin_frontend_team
    ports:
      - "3001:80"
    environment:
      - REACT_APP_API_URL=http://adminservice:8002
    depends_on:
      - adminservice
    networks: [app-network]

  frontend:
    build:
      context: ./frontend
    container_name: frontend_team
    ports:
      - "5174:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - DOCKER_ENV=true
    depends_on:
      - catalogservice
    command: npm run dev -- --host 0.0.0.0 --port 5173
    networks: [app-network]

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_name
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks: [app-network]

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data: